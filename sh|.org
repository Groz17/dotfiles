* Aliases
TODO: Add completions

#+name: aliases
#+begin_src sh :results output :noweb yes :prologue "cat << 'EOF'" :epilogue EOF

<<common-aliases()>>

# Function aliases - generated from table below
<<function-aliases()>>

<<distro-aliases()>>
#+end_src

** Pure
Maybe create table and completions here as well
#+name: common-aliases
#+begin_src sh :results output :prologue "cat << 'EOF'" :epilogue EOF
alias ls='ls --color=auto'     # preferred listing
alias grubup="sudo update-grub"

alias psmem='ps auxf | sort -nr -k 4'
alias psmem10='ps auxf | sort -nr -k 4 | head -10'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'
alias ......='cd ../../../../..'
alias dir='dir --color=auto'
alias vdir='vdir --color=auto'

alias tb='nc termbin.com 9999'
alias helpme='cht.sh --shell'

# Get the error messages from journalctl
# alias jctl="journalctl -p 3 -xb"

alias m="man"
alias v="nvim"
alias vi="vim -i NONE"
alias vim="vim -i NONE"
alias V="SUDO_EDITOR=\"nvim\" sudoedit"
alias t="trans"
alias em="emacsclient -c -a ''"
# cool: https://www.reddit.com/r/emacs/comments/3rxfr5/xclip_copypaste_killyank_and_emacs_in_a_terminal/
alias e='emacsclient -t -a ""'
alias E="SUDO_EDITOR=\"emacsclient -t -a ''\" sudoedit"

alias vinfo='nvim -c "silent only" -c "Vinfo "'
alias perli='reply'

alias adb='HOME="$XDG_DATA_HOME"/android adb'
alias clj='clojure'
alias gg="lazygit"
alias py="python"
# alias d="lazydocker"
alias l="ls"
alias s="sioyek"
alias a="apy"

alias V="nvim -c TransparentEnable"

alias f="fd"
#+end_src

** Subcommands
Define function aliases that wrap commands with a default action (for commands
with subcommands):
#+name: function-aliases-table
| alias | command | default_action           |
|-------+---------+--------------------------|
| g     | git     | status                   |
| mr    | mr      | status                   |
| d     | docker  | ps                       |
| k     | kubectl | get all                  |

Generate functions from table:
#+name: function-aliases
#+begin_src emacs-lisp :var funcs=function-aliases-table :exports none :results raw
(mapconcat
 (lambda (row)
   (let ((alias (car row))
         (cmd (cadr row))
         (default (caddr row)))
     (if (string= alias "mr")
         (format "%s() { (cd ~ && if [ $# -gt 0 ]; then command %s \"$@\"; else command %s %s; fi); }"
                 alias cmd cmd default)
       (format "%s() { if [ $# -gt 0 ]; then %s \"$@\"; else %s %s; fi; }"
               alias cmd cmd default))))
 funcs
 "\n")
#+end_src

*** Completions
Generate completion functions list from the same table:
#+name: completion-functions
#+begin_src emacs-lisp :var funcs=function-aliases-table :exports none :results raw
(concat "_completion_funcs=(\n"
        (mapconcat (lambda (row)
                     (format "    \"%s:%s\"" (car row) (cadr row)))
                   funcs
                   "\n")
        "\n)")
#+end_src

** Distro-specific

Name every distro-specific alias block added

#+name: distro-aliases
#+begin_src emacs-lisp :exports none :results raw
(let* ((distro (string-trim (org-sbe "distro")))
       (block-name (concat "distro-aliases-" distro)))
  (org-babel-ref-resolve block-name))
#+end_src

*** Arch
#+name: distro-aliases-arch
#+begin_src sh :results output :prologue "cat << 'EOF'" :epilogue EOF
alias upd='/usr/bin/garuda-update'
[ ! -x /usr/bin/yay ] && [ -x /usr/bin/paru ] && alias yay='paru'
alias fixpacman="sudo rm /var/lib/pacman/db.lck"
alias rmpkg="sudo pacman -Rdd"
alias big="expac -H M '%m\t%n' | sort -h | nl"     # Sort installed packages according to size in MB (expac must be installed)
alias rtfm='ranger /usr/share/doc/arch-wiki/html/en'

# Get fastest mirrors
alias mirror="sudo reflector -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
alias mirrord="sudo reflector --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
alias mirrors="sudo reflector --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
alias mirrora="sudo reflector --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"

alias pacdiff='sudo -H DIFFPROG=meld pacdiff'

# Recent installed packages
alias rip="expac --timefmt='%Y-%m-%d %T' '%l\t%n %v' | sort | tail -200 | nl"

# Cleanup orphaned packages
alias cleanup='sudo pacman -Rns $(pacman -Qtdq)'
#+end_src

*** Fedora
#+name: distro-aliases-fedora
#+begin_src sh :results output :prologue "cat << 'EOF'" :epilogue EOF
# alias fedora_test="echo fedora_test"
#+end_src

* Functions
#+name: functions
#+begin_src sh :results output :prologue "cat << 'EOF'" :epilogue EOF
c() {
  if [ -t 0 ]; then
    # stdin is a terminal: act as paste (output clipboard)
    wl-paste
  else
    # stdin is piped: act as copy (input to clipboard)
    wl-copy
  fi
}

J(){
cd "$(fd -E \\.git -i -td '^'"$(sed 's/[][^\\."+*?()|{}$#&~-]/\\\0/' <<< "$1")"'.*$' ~/vimwiki | ifne sh -c 'awk "{print length,\$0}"|sort -k1,1n |cut -f1 --complement -d " "|fzf -1')"
}


info() {
path=`command info -w "$1"`
if [ $path == '*manpages*' ]; then
  emacsclient -t -a '' --eval "(progn (man \"$1\")(delete-window))"
else
  emacsclient -t -a ''  "$path"
fi
}

# ** Emacs-inspired
# Magari usa stessi mapping di emacs nel terminal, tipo F15a per agenda?
compile () {
    args="${*:-$(emacsclient --eval '(print compile-command nil)' \
                 | sed 's/^.//;s/.$//')}"  # strip outer quotes
    emacsclient -t --eval "(compile \"$args\")"
  }

edir () {
  target=${1:-$PWD}
    if [ ! -d "$target" ]; then
        echo "Not a directory: '$target'" >&2
        return 1
    fi
    emacsclient -a '' -t --eval "(progn (dired \"$target\") (wdired-change-to-wdired-mode))"
  }

eww () {
  emacsclient -t --eval "(eww \"$*\")"
}

agenda () {
    # emacsclient -t --eval "(progn (org-agenda-list)(kill-buffer "*dashboard*") (delete-other-windows))"
    # emacsclient -t --eval "(progn (org-agenda-list) (delete-other-windows)(kill-buffer "*dashboard*"))"
    emacsclient -t --eval "(progn (org-agenda-list) (delete-other-windows))"
}

magit () {
  target=${1:-$PWD}
  if ! git rev-parse --is-inside-work-tree &>/dev/null ; then
    echo "Not a git repository: '$target'" >&2
    return 1
  fi
  emacsclient -t --eval "(magit-status-setup-buffer \"$target\")"
}
#+end_src

* External commands
#+name: commands
#+begin_src sh :var shell="sh" :results output :prologue "cat << 'EOF'" :epilogue EOF
eval "$(gh copilot alias -- $shell)"
eval "$(starship init $shell)"
eval "$(atuin init $shell)"
# Make sure it appears even after rvm, git-prompt and other shell extensions that manipulate the prompt.
eval "$(direnv hook $shell)"
# In some target folder, create an .envrc file and add some export(1) and unset(1) directives in it.
# Type direnv allow .  and watch direnv loading your new environment. Note that direnv edit . is a handy  short‐ cut that opens the file in your $EDITOR and automatically reloads it if the file's modification time has changed.


# Please ensure that zoxide is initialized right at the end of your shell configuration file (usually ~/.bashrc).
eval "$(zoxide init --cmd j $shell)"
#+end_src

# eval "$(pay-respects bash --alias| sed '$s/f/fk/')"
# eval "$(printf '%s\n'  'r !pay-respects bash --alias' 'v/^alias /d' 's/f/fk' Q | ed -s)"
# lol eval "$(printf '%s\n'  'r !pay-respects bash --alias' 'v/^alias /d' 's/f/<space>' Q | ed -s)"
