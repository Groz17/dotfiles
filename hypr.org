#+startup: content
Refer to the wiki for more information. see: https://wiki.hyprland.org/Configuring/

You can split this configuration into multiple files
Create your files separately and then link them to this file like this:
source = ~/.config/hypr/myColors.conf

* Hyprland
:PROPERTIES:
:header-args: :tangle  ~/.config/hypr/hyprland.conf
:END:

** TODO TASK LIST
- [ ] one-shot emacs/neovim keybinding, like C-c r for eradio?
- [ ] bindsym $mod+s sticky toggle
- [ ] add search image in clipboard? after using grim...
- [ ] hyprshot don't save to clipboard
- [ ] move to workspace without going there
- [ ] keybinding to go running emacs instance(s)
- [ ] focus on open?
- [ ] mapping close notification
- [ ] open chatgpt in workspace
- [ ] wl-paste -s, --seat seat-name    Pick the seat to work with.?
- [ ] iio-hyprland && sensory-proxy
- [ ] quick mapping to show bar (when in fullscreen mode)? maybe just a few secs
- [ ] focus pane when moving mouse
- [ ] also u could use keys like f20 here (no modifier b4)
- [ ] turn pane into own tab?
- [ ] support v:count? bindv?

# hyprctl clients -j | jq -r '.[]|(.pid|tostring)+"\t"+.title' | grep -v "$USER"@ | rofi -dmenu  -display-column-separator '\t' -display-columns 2

** [[https://wiki.hyprland.org/Configuring/Monitors/][MONITORS]]
ruota schermo per prendere appunti?

#+begin_src hyprlang
# monitor=,preferred,auto,auto
# monitor=,preferred,auto,auto, transform, 1
monitor=,preferred,auto,auto, transform, 0
#+end_src

** [[https://wiki.hyprland.org/Configuring/Keywords/][MY PROGRAMS]]

Set programs that you use

#+begin_src hyprlang
# usa ENV vars?
$terminal = ghostty
#$fileManager = dolphin
$fileManager = ghostty -e emacsclient -t --eval '(dired nil)'
# $menu = wofi --show drun
# in futuro standalone emacs picker (elimina tutte le dipendenze)
$menu = rofi -show drun -show-icons
$browser = floorp || LD_LIBRARY_PATH=/opt/floorp floorp flatpak run one.ablaze.floorp

#$email 
#$pass

# open krita/image editing software with clipboard as input? for when commenting screenshotted code?
#+end_src
** AUTOSTART
Autostart necessary processes (like notifications daemons, status bars, etc.)
Or execute your favorite apps at launch

should u use & for these exec-onces?

*** Necessary processes
search for others w/ llm or configs
#+begin_src hyprlang
  # exec-once = nm-applet &
  # find themes
  exec-once = hyprctl setcursor Bibata-Modern-Classic 24
#+end_src

**** File synchronization
# exec-once=syncthing --no-browser # file synchronization
  
**** Status bar
#+begin_src hyprlang
exec-once = waybar &
#+end_src  

**** Idle manager
(lock screen after X minutes, turn off screen after Y minutes)

#+begin_src hyprlang
exec-once = hypridle &
#+end_src  

**** Notification daemon
#+begin_src hyprlang
#exec-once = swaync
# dunst
#+end_src  
**** Clipboard
#+begin_src hyprlang
  # exec-once = wl-clipbard-history -t
  # cb?
exec-once = wl-paste --type text --watch cliphist store
exec-once = wl-paste --type image --watch cliphist store
#+end_src  
**** Geolocalization
#+begin_src hyprlang
# exec-once = ags &
# ags -c config.js
exec-once = /usr/lib/geoclue-2.0/demos/agent
# exec-once = /usr/lib/geoclue-2.0/demos/agent && gammastep
exec-once = darkman run
#+end_src  

**** Wallpaper manager
how to zoom wallpaper?
#+begin_src hyprlang
exec-once = hyprpaper
#+end_src  

*** Favorite apps
#+begin_src hyprlang
# exec-once = ~/scripts/DailyRandomAnki
# exec-once = swww-daemon&&~/scripts/DailyRandomAnki
# exec-once = swww-daemon && swww img "$DAILY_ANKI_QUESTION_PATH"

# start emacs server
# exec-once = /usr/bin/emacs --daemon
# so it picks up my config?
# exec-once = emacs --with-x-toolkit-lucid --daemon
exec-once = emacs --daemon

# would be cool it used waybar text (generate w/ org-babel)
exec-once = [workspace 1 silent] $browser
# exec-once = [workspace special] $mail
#+end_src

# not sure if good idea
# exec-once = /opt/docker-desktop/bin/docker-desktop

** [[https://wiki.hyprland.org/Configuring/Environment-variables/][ENVIRONMENT VARIABLES]]

#+begin_src hyprlang

# open in emacs?
# env = GRIMBLAST_EDITOR,photoflare
env = XDG_SCREENSHOTS_DIR,$HOME/Pictures/Screenshots
# Optionally, customize slurp's appearance
env = SLURP_ARGS, -d -b -B F050F022 -b 10101022 -c ff00ff
# Can fix high cpu loads on some machines
env = GRIMBLAST_HIDE_CURSOR, 0

env = XCURSOR_SIZE,24
env = HYPRCURSOR_SIZE,24
env = PATH,$HOME/.cargo/bin:$PATH


cursor{
    inactive_timeout=1
}

#+end_src
** [[https://wiki.hyprland.org/Configuring/Permissions/][PERMISSIONS]]
Please note permission changes here require a Hyprland restart and are not applied on-the-fly for security reasons

#+begin_src hyprlang

# ecosystem {
#   enforce_permissions = 1
# }

# permission = /usr/(bin|local/bin)/grim, screencopy, allow
# permission = /usr/(lib|libexec|lib64)/xdg-desktop-portal-hyprland, screencopy, allow
# permission = /usr/(bin|local/bin)/hyprpm, plugin, allow
#+end_src
** [[https://wiki.hyprland.org/Configuring/Variables/][LOOK AND FEEL]]
#+begin_src hyprlang

# https://wiki.hyprland.org/Configuring/Variables/#general
general {
    gaps_in = 5
    gaps_out = 20

    border_size = 2

    # https://wiki.hyprland.org/Configuring/Variables/#variable-types for info about colors
    # col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg
    col.active_border = rgba(03cc70ff) rgba(00ff99ee) 45deg
    col.inactive_border = rgba(595959aa)
    #col.inactive_border = rgb(000000)

    # Set to true enable resizing windows by clicking and dragging on borders and gaps
    resize_on_border = true

    # Please see https://wiki.hyprland.org/Configuring/Tearing/ before you turn this on
    allow_tearing = false

    # layout = master
    layout = dwindle
}

debug {
disable_logs = false
}

# https://wiki.hyprland.org/Configuring/Variables/#decoration
decoration {
    rounding = 15

# Change transparency of focused and unfocused windows
# mapping for opacity
    active_opacity = 1
    inactive_opacity = 0.8

    shadow {
        enabled = true
        range = 4
        render_power = 3
        color = rgba(1a1a1aee)
    }

    # https://wiki.hyprland.org/Configuring/Variables/#blur
    blur {
        enabled = false
        size = 7
	passes=4
        passes = 1

        vibrancy = 0.1696
    }
}

binds{
    # for when u don't remember stuff
  # workspace_back_and_forth=true
workspace_back_and_forth=false
# dunno what this does
allow_workspace_cycles=true
movefocus_cycles_fullscreen=true
    }

# https://wiki.hyprland.org/Configuring/Variables/#animations
animations {
    enabled = yes, please :)

    # Default animations, see https://wiki.hyprland.org/Configuring/Animations/ for more

    bezier = easeOutQuint,0.23,1,0.32,1
    bezier = easeInOutCubic,0.65,0.05,0.36,1
    bezier = linear,0,0,1,1
    bezier = almostLinear,0.5,0.5,0.75,1.0
    bezier = quick,0.15,0,0.1,1

    animation = global, 1, 10, default
    animation = border, 1, 5.39, easeOutQuint
    animation = windows, 1, 4.79, easeOutQuint
    animation = windowsIn, 1, 4.1, easeOutQuint, popin 87%
    animation = windowsOut, 1, 1.49, linear, popin 87%
    animation = fadeIn, 1, 1.73, almostLinear
    animation = fadeOut, 1, 1.46, almostLinear
    animation = fade, 1, 3.03, quick
    animation = layers, 1, 3.81, easeOutQuint
    animation = layersIn, 1, 4, easeOutQuint, fade
    animation = layersOut, 1, 1.5, linear, fade
    animation = fadeLayersIn, 1, 1.79, almostLinear
    animation = fadeLayersOut, 1, 1.39, almostLinear
    animation = workspaces, 1, 1.94, almostLinear, fade
    animation = workspacesIn, 1, 1.21, almostLinear, fade
    animation = workspacesOut, 1, 1.94, almostLinear, fade
}

# Ref https://wiki.hyprland.org/Configuring/Workspace-Rules/
# "Smart gaps" / "No gaps when only"
# uncomment all if you wish to use that.
# workspace = w[tv1], gapsout:0, gapsin:0
# workspace = f[1], gapsout:0, gapsin:0
# windowrulev2 = bordersize 0, floating:0, onworkspace:w[tv1]
# windowrulev2 = rounding 0, floating:0, onworkspace:w[tv1]
# windowrulev2 = bordersize 0, floating:0, onworkspace:f[1]
# windowrulev2 = rounding 0, floating:0, onworkspace:f[1]

# windowrulev2 = float, class:.*

# See https://wiki.hyprland.org/Configuring/Dwindle-Layout/ for more
dwindle {
    pseudotile = true # Master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below
    preserve_split = true # You probably want this
}

# See https://wiki.hyprland.org/Configuring/Master-Layout/ for more
master {
    new_status = master
}

# https://wiki.hyprland.org/Configuring/Variables/#misc
misc {
    force_default_wallpaper = 0 # Set to 0 or 1 to disable the anime mascot wallpapers
    disable_hyprland_logo = true # If true disables the random hyprland logo / anime girl background. :(
    disable_splash_rendering = true 
enable_anr_dialog=false
# https://github.com/hyprwm/Hyprland/pull/6880
    exit_window_retains_fullscreen = true
}

#+end_src
** INPUT
#+begin_src hyprlang

# https://wiki.hyprland.org/Configuring/Variables/#input
input {
    kb_layout = us
    kb_variant =
    kb_model =
    kb_options =
    kb_rules =
    kb_options = fkeys:basic_13-24

touchdevice  {
    transform = 0
    }

    follow_mouse = 1

    sensitivity = 0 # -1.0 - 1.0, 0 means no modification.

    touchpad {
        natural_scroll = false
    }
}

# https://wiki.hyprland.org/Configuring/Variables/#gestures
gestures {
    # off
    workspace_swipe = true
    workspace_swipe_fingers = 3
}

# Example per-device config
# See https://wiki.hyprland.org/Configuring/Keywords/#per-device-input-configs for more
device {
    name = epic-mouse-v1
    sensitivity = -0.5
}

#+end_src

*** 8BITDO CONTROLLER
#+begin_src hyprlang
# modifier: win+ctrl+shift (doesn't work)
# modifier: win+ctrl (doesn't work) -> ctrl sta per controller
# bind=super ctrl shift,h,exec, playerctl position 10-
bind=super ctrl,h,exec, playerctl position 10-
bind=super ctrl,l,exec, playerctl position 10+
#+end_src
** KEYBINDINGS
#+begin_src hyprlang

# See https://wiki.hyprland.org/Configuring/Keywords/
$mainMod = SUPER # Sets "Windows" key as main modifier

#+end_src

*** [[https://www.youtube.com/watch?v=sz6rMLIjSbU][Zoom]]
#+begin_src hyprlang
bind = $mainMod, mouse_down, exec, hyprctl -q keyword cursor:zoom_factor $(hyprctl getoption cursor:zoom_factor | awk '/^float.*/ {print $2 * 1.1}')
bind = $mainMod, mouse_up, exec, hyprctl -q keyword cursor:zoom_factor $(hyprctl getoption cursor:zoom_factor | awk '/^float.*/ {print $2 * 0.9}')
bind = $mainMod, equal, exec, hyprctl -q keyword cursor:zoom_factor $(hyprctl getoption cursor:zoom_factor | awk '/^float.*/ {print $2 * 1.1}')
bind = $mainMod, minus, exec, hyprctl -q keyword cursor:zoom_factor $(hyprctl getoption cursor:zoom_factor | awk '/^float.*/ {print $2 * 0.9}')
# bind = $mod SHIFT, equal, exec, hyprctl -q keyword cursor:zoom_factor 1
bind = $mainMod , mouse:274, exec, hyprctl -q keyword cursor:zoom_factor 1 # middle button
#+end_src

*** [[https://wiki.hypr.land/Configuring/Binds/#media][Media]]
#+begin_src hyprlang
bindel = , XF86AudioRaiseVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%+
bindel = , XF86AudioLowerVolume, exec, wpctl set-volume @DEFAULT_AUDIO_SINK@ 5%-
bindl = , XF86AudioMute, exec, wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle
bindel = ,XF86AudioMicMute, exec, wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle

# usa stessi keybindings di mpv?
bindl = , XF86AudioPlay, exec, playerctl play-pause
bindl = , XF86AudioPrev, exec, playerctl previous
bindl = , XF86AudioNext, exec, playerctl next

# go 10 sec forward? for tridactyl yt...
# bindl = $mainMod, greater, exec, playerctl next
# bindl = $mainMod, p, exec, playerctl play-pause
# bindl = $mainMod, ., exec, playerctl play-pause
# make these support v:count?
# previous first in playlist? <S-BS>?
bindl = $mainMod shift, n, exec, playerctl previous
# bindl = $mainMod, less, exec, playerctl previous

bind = $mainMod, a, exec, echo '{ "command": ["set_property", "af","lowpass=f=400"] }' | socat - /tmp/mpvsocket
bind = $mainMod shift, a, exec, echo '{ "command": ["set_property", "af",""] }' | socat - /tmp/mpvsocket
#+end_src

*** Recognize song
#+begin_src hyprlang
# bindl = $mainMod shift, n, exec, scripts/active
bind = $mainMod, s, exec, ~/.config/hypr/scripts/recognize_song
#+end_src

#+begin_src bash :tangle ~/.config/hypr/scripts/recognize_song
#!/usr/bin/env bash
dunstify "Recognizing song..."
song="$(timeout 10 flatpak run com.github.marinm.songrec recognize -d Webcam\ C270\ Mono --json)"
if [ -n "$song" ]; then
    artist="$(jq -r '.track.urlparams | .["{trackartist}"]' <<<"$song" | php -r 'echo urldecode(file_get_contents("php://stdin"));')"
    title="$(jq -r '.track.urlparams | .["{tracktitle}"]' <<<"$song" |  php -r 'echo urldecode(file_get_contents("php://stdin"));')"

	dunstify "Title: $title" "Artist: $artist"
	wl-copy <<<"$artist - $title"
else
	dunstify "song not found"
fi
#+end_src
*** Brightness
#+begin_src hyprlang
bindel = ,XF86MonBrightnessUp, exec, brightnessctl s 10%+
bindel = ,XF86MonBrightnessDown, exec, brightnessctl s 10%-
#+end_src

*** Notifications
#+begin_src hyprlang
bind = $mainMod SHIFT, comma, exec, ~/.config/hypr/scripts/notifications
#+end_src

#+begin_src bash :tangle ~/.config/hypr/scripts/notifications
#!/usr/bin/env bash
for i in {1..3}; do dunstctl history-pop;done
sleep 5
dunstctl close-all
#+end_src

*** Bluetooth
# TODO: fai check/toggle/notify/etc...
#+begin_src hyprlang
bind=super shift,b,exec, bash -c "bluetoothctl <<< connect\ $(bluetoothctl <<< devices | awk '/ Soundcore P2 Mini$/{print $2}')"
#+end_src

*** Apps
#+begin_src hyprlang
# Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more
bind = $mainMod, Return, exec, $terminal
# bind = $mainMod, RETURN, exec, emacsclient -n -e '(progn (select-frame-set-input-focus (selected-frame)) (vterm))'


# prefix bind for opening files like in vim/emacs? use $EDITOR (magari con nvim -c or smth)
# how to quickly switch between emacs and neovim?
# open terminal when exiting or before emacs?
# bind = $mainMod, e, exec, [float;fullscreen] emacsclient -c  -a ''
# bind = $mainMod, e, exec, emacsclient -c  -a '' -F "'(fullscreen . fullboth)"
bind = $mainMod, e, exec, emacsclient -c  -a ''
# bind = $mainMod SHIFT, E, exec, emacsclient --eval "(emacs-everywhere)"

# bind = $mainMod, P, exec, emacsclient -n -e '(progn (select-frame-set-input-focus (selected-frame)) (pass))'

# bind = $mainMod, E, exec, emacsclient -c -a ""
# bind = $mainMod, F, exec, emacsclient -n -e '(progn (select-frame-set-input-focus (selected-frame)) (dired "~/"))'
# bind = $mainMod, B, exec, emacsclient ~/org/roam/personal/Bookmarks/Sites.org
# bind = $mainMod, N, exec, emacsclient ~/org/notes.org
# bind = $mainMod, Z, exec, emacsclient -n -e '(progn (select-frame-set-input-focus (selected-frame)) (elfeed))'
# bind = $mainMod CONTROL, M, exec, emacsclient -n -e '(progn (select-frame-set-input-focus (selected-frame)) (emms))'



# bind = $mainMod, d, exec, emacsclient -c  -a 'emacs' -F "'(app-launcher)" DT video?
bind = $mainMod shift, e, exec, [float;fullscreen]emacs -Q
### maybe better to put in free workspace?
# bind=super ,equal,exec, emacsclient -e '(full-calc)' -c -a emacs
# have To use shift+9...
# bind=super , (,exec, emacsclient -e '(eshell)' -c -a emacs
# bind=super , minus,exec, emacsclient -e '(eshell)' -c -a emacs

# maybe these mappings should go under the terminal/ghostty keybind prefix (use zellij/tmux maybe?) or actually this is better maybe, use something like exwm
# bind = $mainMod, v, exec, PATH=$HOME/.cargo/bin:$PATH ghostty --fullscreen -e nvim
bind = $mainMod, v, exec, ghostty --fullscreen -e nvim
# create kanata chord for this?
bind = $mainMod, B, exec, $browser
# bind = $mainMod, n, exec, hyprctl keyword gaps_in=0
 # a for apps
 # use emacs
# bind = $mainMod, a, exec, ferdium --ozone-platform=wayland --enable-fetures-WaylandWindowDecorations

# bind = $mainMod, period, exec, [float] $fileManager
# crea submap per emacs bindings for email, dired, etc...
#bind = $mainMod CTRL, x, d, exec, [float] $fileManager

# super shift enter?
bind = $mainMod, D, exec, $menu
# bind = $mainMod, D, exec, [float;size 30% 30%] emacsclient -cF "((visibility . nil))" -e "(app-launcher-run-app)"
# bind = $mainMod, D, exec, rofimoji
# bind = $mod, L, exec, pkill rofi || rofi -show power-menu -modi power-menu:rofi-power-menu # We can use rofi for power management as well
#+end_src

*** Hypr Ecosystem
#+begin_src python
# query screen for color
bind = $mainMod, c, exec, hyprpicker -a
# bind = $mainMod SHIFT, x, exec, hyprlock
# zzz mnemonic
# maybe shift? so u don't accidentaly type? test!
bind = $mainMod , z, exec, hyprlock
#+end_src

*** WM
#+begin_src hyprlang
# bind = $mainMod, W, layoutmsg, swapwithmaster master
bind = $mainMod, W, layoutmsg, layoutmsg, cyclenext
# maybe use mainmod e to start programs?

# https://www.reddit.com/r/hyprland/comments/17nhidq/comment/mrovcx0/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button
# basically same key as windows/super (invert)... why it goes fullscreen?
bind = $mainMod SHIFT, backslash, exec, $(hyprctl activewindow -j | jq '.floating') && hyprctl dispatch cyclenext tiled || hyprctl dispatch cyclenext floating

bind = $mainMod SHIFT, Q, killactive,
bind = $mainMod, Backspace, exit,

# bind = $mainMod, g, togglefloating,
#bind = $mainMod SHIFT, F, togglefloating,
bind = $mainMod SHIFT, F, fullscreen, 
#maybe o as the vim mapping ^wo?
# bind = $mainMod, F, fullscreen, 0
bind = $mainMod, F, fullscreen, 1
# similar to alt-tab (same keymap)
# go to previous window map?
bind = $mainMod shift, tab, exec, rofi -show window
bind = $mainMod, tab, exec, hyprctl dispatch focuscurrentorlast 
# bind = $mainMod, P, pseudo,
# toggle like vim-unimpaired
# kinda looks like vertical and horizontal but mixed
bind = $mainMod, backslash, togglesplit
# bind = $mainMod, w, togglesplit

bind=SUPER,comma,layoutmsg,cyclenext
bind=SUPER,period,layoutmsg,cycleprev
# bind=SUPER,comma,layoutmsg,orientationleft
# bind=SUPER,g,togglegaps
# bind=SUPER,Shift,g,gap,-5
# bind=SUPER,Ctrl,g,gap,+5

# Monitor Management (multi-monitor setups)
# bind=SUPER,Ctrl,down,focusmonitor,d
# bind=SUPER,Shift,left,movewindow,mon:l

# bind = $mainMod, G, centerwindow
bind = $mainMod, G, togglegroup
bind = $mainMod, tab, changegroupactive, f
bind = $mainMod shift, tab, changegroupactive, b
bind = $mainMod SHIFT, G, moveoutofgroup
# bind = $mainMod SHIFT, Tab, bringactivetotop
# maybe use mod+y (rot13 of l) (general way to remap if a letter is already remapped?)
# bind = $mainMod, esc, shutdown,
# bind = $mainMod shift, z, exec, shutdown now
bind = $mainMod , delete, exec, shutdown now
# restart binding
# use sudo instead of wiki password? gpg?
# bind = $mainMod,I, exec, sudo -c ''
# need to use emacs completions
# bind = alt, tab, workspace, m+1
# bind = alt shift, tab, workspace, m-1

# would be nice to show icon if item is multiline?


# in attesa di tablet mode
# it should really support v:count though
# bind = $mainMod, x, exec, perl -pi -e 's/^\s**monitor\s*=.*,\s*\K([01])$/$1 eq 0 ? "1":"0"/e' ~/.config/hypr/hyprland.conf
# bind = $mainMod, x, exec, perl -pi -e 's/^\s**monitor\s*=.*,\s*\K([01])$/$1^1/e' ~/.config/hypr/hyprland.conf
# bind = $mainMod, x, exec, hyprclt keyword monitor ',preferred,auto,auto, transform, 0' && hyprctl keyword input:touchdevice:transform 0 
bind = $mainMod, x, exec, ~/.config/hypr/scripts/monitor

# Move focus with mainMod + arrow keys
bind = $mainMod, h, movefocus, l
bind = $mainMod, j, movefocus, d
bind = $mainMod, l, movefocus, r
bind = $mainMod, k, movefocus, u

# TODO: make these work like in vim
bind = $mainMod SHIFT, h, movewindow, l
bind = $mainMod SHIFT, j, movewindow, d
bind = $mainMod SHIFT, l, movewindow, r
bind = $mainMod SHIFT, k, movewindow, u
#+end_src

*** Clipboard
#+begin_src hyprlang
# lines and width don't work
bind = $mainMod shift, equal, exec, cliphist list | rofi -dmenu -display-columns 2 -p "Select item to copy" -lines 30 -width 75 | cut -f1 | xargs cliphist decode | wl-copy
# cliphist but for primary selection?
#+end_src

*** OCR
#+begin_src hyprlang
# also works when using transparent window
bind = $mainMod, o, exec, sh -c 'grimblast --freeze save area - | tesseract - - | wl-copy'
bind = $mainMod SHIFT, o, exec, sh -c 'grimblast --freeze save area - | tesseract - - | tr \\n \  | wl-copy'
#+end_src

*** Screenshots
#+begin_src hyprlang
# edit?
# add filename?
# --openfile
# p->salva in Pictures mnemonic
bind = SUPER,       p, exec, grimblast --freeze --notify save area
bind = SUPER SHIFT, p, exec, grimblast --freeze --notify save active
# dunno what these do, also clash with kanata terminal keybindings
# bind = SUPER ALT,   p, exec, grimblast --notify save output
# bind = SUPER CTRL,  p, exec, grimblast --notify save screen
# bind = SUPER,       c, exec, grimblast --notify copy area
# nice dicotomy/mnemonic w y (copy) and p (paste)
bind = SUPER,       y, exec, grimblast --freeze --notify copy area
bind = SUPER SHIFT, y, exec, grimblast --freeze --notify copy active
# bind = SUPER ALT,   c, exec, grimblast --notify copy output
# bind = SUPER CTRL,  c, exec, grimblast --notify copy screen

#+end_src

*** TODO Recording
**** Audio
#+begin_src hyprlang
#+end_src

**** Video
#+begin_src hyprlang
#+end_src

*** TODO Workspaces (generate code)

# goto last workspace? mod<c-^>

,#+begin_src emacs-lisp :results output :tangle no
(dotimes (i 10)
  (let ((num (1+ i)))
    (princ (format "bind = SUPER, %d, workspace, %d\n" num num))
    (princ (format "bind = SUPER SHIFT, %d, moveToWorkspace, %d\n" num num))))
#+end_src

#+begin_src hyprlang

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspacesilent, 1
bind = $mainMod SHIFT, 2, movetoworkspacesilent, 2
bind = $mainMod SHIFT, 3, movetoworkspacesilent, 3
bind = $mainMod SHIFT, 4, movetoworkspacesilent, 4
bind = $mainMod SHIFT, 5, movetoworkspacesilent, 5
bind = $mainMod SHIFT, 6, movetoworkspacesilent, 6
bind = $mainMod SHIFT, 7, movetoworkspacesilent, 7
bind = $mainMod SHIFT, 8, movetoworkspacesilent, 8
bind = $mainMod SHIFT, 9, movetoworkspacesilent, 9
bind = $mainMod SHIFT, 0, movetoworkspacesilent, 10
#+end_src

#+begin_src hyprlang
bind = $mainMod , R, submap, resize
submap=resize
binde=,H,resizeactive,-10 0
binde=,J,resizeactive,0 10
binde=,K,resizeactive,0 -10
binde=,L,resizeactive,10 0
bind=,escape,submap,reset
submap=reset

# Example special workspace (scratchpad)
# bind = $mainMod, S, togglespecialworkspace, magic
# bind = $mainMod SHIFT, S, movetoworkspace, special:magic
# bind = $mainMod, S, togglespecialworkspace
# bind = $mainMod SHIFT, S, movetoworkspace, special
# bind = $mainMod, period, togglespecialworkspace, magic
# bind = $mainMod, comma, movetoworkspace, special:magic

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow

# binds = Control_R&Super_R&Alt_L, J&K&L, exec, kitty

#+end_src
*** Notes
#+begin_src hyprlang

# TODO:
# bind = $mainMod shift, return, exec, [float] $terminal
bind = $mainMod , slash, exec, [float] $terminal

# like vim/noice binding but for your shell
# how to hide prompt? or just put the shell as a title...
# bind = $mainMod , y, exec, [float;size 10% 10;center]$terminal
# close after successfull command? dunstify?
# bind = $mainMod shift,semicolon, exec, [float;size 50% 10%;center]STARSHIP_CONFIG= $terminal -e bash -c 'read -ep "Run: " cmd; eval "$cmd"; sleep 5; exit'
# windowrulev2 = float,class:^(ex)$

# open neovim in file w/ keymaps? like pressing <super>n<space>fp to go plugins or smth?
# substitute with org-capture?
bind = $mainMod , t, exec, [float] $terminal -e nvim -u ~/scripts/hyrp_float.vim -c 'norm!\ Gzt2o' ~/todo/todo.txt

bind = $mainMod shift , t, exec, [float] $terminal -e nvim -u ~/.config/nvim/hyrp_float.vim -c 'norm!\ Gzto' ~/todo/todo.txt
# for language learning? arabic/spanish (like anki)... I want this at startup
# bind = $mainMod , a, exec, ~/scripts/DailyRandomAnki
# write scripts here and tangle them

# TODO: add v:count hyprland
# metti in kanata?
bind = $mainMod , n, exec, [float;size 30% 30%] PATH=$HOME/.cargo/bin:$PATH kitty -e nvim -c 'norm 1 Qd'
# hyprctl activewindow -j | jq .title?
bind = $mainMod shift, n, exec, [float] PATH=$HOME/.cargo/bin:$PATH $terminal -e nvim -c 'let @+=\"## \" ..input(\">\")..\"\n\"..@+|norm 1 Qy'
#funge da term: bind = $mainMod shift, n, exec, hyprctl dispatch exec 'PATH=$HOME/.cargo/bin:$PATH ghostty -e "nvim -c '\''let @+=\"# \" ..input(\">\")..@+|norm 1 Qy'\''"'
# resize terminal for input?
bind = $mainMod shift, slash, exec, [float;size 30% 30%] PATH=$HOME/.cargo/bin:$PATH $terminal -e nvim -c 'let @+=input(">")|norm 1 Qd'

#+end_src

*** Songs
**** Downloaded songs
#+begin_src hyprlang
bind = $mainMod , m, exec, ~/.config/hypr/scripts/songs
bind = $mainMod shift, m, exec, ~/.config/hypr/scripts/yt_songs
#+end_src

#+begin_src bash :tangle ~/.config/hypr/scripts/songs
#!/usr/bin/env bash
# how to reference this from config file?
SOCKET=/tmp/mpvsocket
[ -S "$SOCKET" ] && echo '{ "command": ["quit"] }' | socat - "$SOCKET"

music_dir=~/Music

# TODO: show album art? (preview)
find "$music_dir" -type f -exec stat --printf="%w\t%n\n" {} +  | sort -nr | cut -f 2- |
rofi -sort -i -normalize-match -multi-select -dmenu -p "Search Song" -display-columns 5,6 -display-column-separator / |
ifne mpv --playlist=/dev/stdin --no-video --no-terminal --input-ipc-server="$SOCKET"
#+end_src

**** Search on YT
#+begin_src bash :tangle ~/.config/hypr/scripts/yt_songs
#!/usr/bin/env bash
SOCKET=/tmp/mpvsocket
[ -S "$SOCKET" ] && echo '{ "command": ["quit"] }' | socat - "$SOCKET"
search="$(rofi -dmenu -l 0 -p 'Search song')"
[ -z "$search" ] && exit 1;
url=$(yt-dlp -f bestaudio --get-url "ytsearch:$search"|head -n1)
<<<"$url" ts "%b %d %H:%M:%S">> ~/.local/share/yt_urls
mpv --input-ipc-server="$SOCKET" "$url"
#+end_src
  

*** Global Keybinds 
https://wiki.hypr.land/Configuring/Binds/#global-keybinds
for reaper record?
bind = SUPER, F10, sendshortcut, SUPER, F4, class:^(com\.obsproject\.Studio)$
emacs emms

** [[https://wiki.hyprland.org/Configuring/Window-Rules/][WINDOWS]] AND [[https://wiki.hyprland.org/Configuring/Workspace-Rules/][WORKSPACES]]
#+begin_src hyprlang

# Example windowrule v1
# windowrule = float, ^(kitty)$

# Example windowrule v2
# windowrulev2 = float,class:^(kitty)$,title:^(kitty)$

# Ignore maximize requests from apps. You'll probably like this.
windowrulev2 = suppressevent maximize, class:.**

# Fix some dragging issues with XWayland
windowrulev2 = nofocus,class:^$,title:^$,xwayland:1,floating:1,fullscreen:0,pinned:0

windowrulev2 = float,class:^(pulsemixer)$
windowrulev2 = size 700 400,class:^(pulsemixer)$
windowrulev2 = move 100%-800 100%-500,class:^(pulsemixer)$
windowrulev2 = opacity 0.9,class:^(pulsemixer)$
# bind = $mainMod, A, exec, $terminal --class=pulsemixer sh -c 'pulsemixer' 
# bind = $mainMod, m, exec, $terminal --class=pulsemixer -e sh -c 'pulsemixer' 

workspace=1,class:^(emacs)$

# windowrulev2 = idleinhibit fullscreen, class:.* # if a window is fullscreen, don't idle
# windowrulev2 = opacity 0.8, class:($terminal) # set opacity to 0.8 for terminal, a variable we defined in hyprland.conf

#+end_src

*** Notifications
# copy notification to clipboard binding?
#+begin_src hyprlang


# https://www.reddit.com/r/hyprland/comments/1gbbgt8/no_gaps_when_only/
# "Smart gaps" / "No gaps when only"
# uncomment all if you wish to use that.
workspace = w[t1], gapsout:0, gapsin:0
workspace = w[tg1], gapsout:0, gapsin:0
workspace = f[1], gapsout:0, gapsin:0
windowrulev2 = bordersize 0, floating:0, onworkspace:w[t1]
windowrulev2 = rounding 0, floating:0, onworkspace:w[t1]
windowrulev2 = bordersize 0, floating:0, onworkspace:w[tg1]
windowrulev2 = rounding 0, floating:0, onworkspace:w[tg1]
windowrulev2 = bordersize 0, floating:0, onworkspace:f[1]
windowrulev2 = rounding 0, floating:0, onworkspace:f[1]
#+end_src
*** Special workspaces
#+begin_src hyprlang
# just use emacs

# - calculator
# - music
# - password manager
# - htop
# - email client

# special workspace usage reddit post
# windowrulev2 = float,class:(qalculate-gtk)
# windowrulev2 = workspace special:calculator,class:(qalculate-gtk)
# like calc-dispatch in emacs
# can't use shift + numbers cause those are for workspaces
# bind=super shift,8,exec, pgrep qalculate-gtk&&hyprctl dispatch togglespecialworkspace calculator||qalculate-gtk&
# windowrulev2 = workspace special:reaper (xprop)
#+end_src

* Hyprlock
:PROPERTIES:
:header-args: :tangle  ~/.config/hypr/hyprlock.conf
:END:

#+begin_src hyprlang
# BACKGROUND
background {
    monitor =
        # color = rgba(25, 20, 20, 1.0)
        # blur_passes = 2
    path = ~/Pictures/Lock/kanagawa.jpg
    blur_passes = 1
    contrast = 0.8916
    brightness = 0.8172
    vibrancy = 0.1696
    vibrancy_darkness = 0.0
}

# GENERAL
general {
    no_fade_in = false
    grace = 0
    ignore_empty_input=false
}

# INPUT FIELD
input-field {
    monitor =
        size = 20%, 5%
    # size = 240, 60
    outline_thickness = 3
    dots_size = 0.2 # Scale of input-field height, 0.2 - 0.8
    dots_spacing = 0.2 # Scale of dots' absolute size, 0.0 - 1.0
    dots_center = true
    outer_color = rgba(0, 0, 0, 0)
    inner_color = rgba(0, 0, 0, 0.8) # no fill
    font_color = rgb(200, 200, 200)
        outer_color = rgba(33ccffee) rgba(00ff99ee) 45deg
        check_color=rgba(00ff99ee) rgba(ff6633ee) 120deg
        fail_color=rgba(ff6633ee) rgba(ff0066ee) 40deg
        font_color = rgb(143, 143, 143)

    fade_on_empty = false
    font_family = JetBrains Mono Nerd Font Mono
    placeholder_text = <i><span foreground="##fdd6ff">Input Password...</span></i>
    hide_input = false
    position = 0, 240
    halign = center
    valign = center

        position = 0, -20
        rounding = 15
}

# TIME
label {
    monitor =
    # rotate = 270
    text = cmd[update:1000] echo "$(date +"%-I:%M%p")"
    color = rgb(255,70,0)
    font_size = 100
    font_family = JetBrains Mono Nerd Font Mono ExtraBold
    position = 0, 180
    # position = -500, 270
    halign = center
    valign = bottom
}

# Proverbs
label {
    monitor =
    text = cmd[update:3600000] echo "<span background='##0f2222' foreground='##00ff70'>$(fortune jp|sed 's/\.$//')</span>"
    color = rgba(255, 153, 28, 1.0)
    font_size = 37
    font_family = JetBrains Mono Nerd Font Mono ExtraBold
    position = 0, -120
    halign = center
    valign = top
}
#+end_src

** Proverbs
#+begin_src example :tangle no
光陰矢の如し (Kōin ya no gotoshi)
Time flies like an arrow.
%
明日は明日の風が吹く (Ashita wa ashita no kaze ga fuku)
Tomorrow’s wind will blow tomorrow.
%
井の中の蛙大海を知らず (I no naka no kawazu taikai o shirazu)
A frog in a well knows nothing of the sea.
%
千里の道も一歩から (Senri no michi mo ippo kara)
A journey of a thousand miles begins with a single step.
%
見ぬが花 (Minu ga hana)
Not seeing is a flower.
%
花より団子 (Hana yori dango)
Dumplings over flowers.
%
ちりも積もれば山となる (Chiri mo tsumoreba yama to naru)
Even dust, when piled up, becomes a mountain.
%
雨後の筍 (Ugo no takenoko)
Bamboo shoots after rain, referring to sudden, rapid growth.
%
魚心あれば水心 (Uogokoro areba mizugokoro)
If the fish is kind to the water, the water is kind to the fish.
%
同じ釜の飯を食う (Onaji kama no meshi o kuu)
To eat from the same rice pot.
%
三人寄れば文殊の知恵 (Sannin yoreba monju no chie)
When three gather, wisdom appears.
%
鯛も一人はうまからず (Tai mo hitori wa umakarazu)
Even sea bream tastes bland when eaten alone.
%
八方美人 (Happō bijin)
A person who tries to please everyone and ends up pleasing no one.
%
遠くの親類より近くの他人 (Tōku no shinrui yori chikaku no tanin)
A nearby stranger is better than a distant relative.
%
泣きっ面に蜂 (Nakittsura ni hachi)
A bee to a crying face; adding insult to injury.
%
一期一会 (Ichigo ichie)
One time, one meeting.
%
花鳥風月 (Kachō fūgetsu)
Flower, bird, wind, moon; discovering yourself through nature.
%
因果応報 (Inga ōhō)
Cause brings result.
%
灯台下暗し (Tōdai moto kurashi)
It is dark under the lighthouse.
%
十人十色 (Jūnin toiro)
Ten people, ten colors.
%
虎穴に入らずんば虎子を得ず (Koketsu ni irazunba koji o ezu)
You cannot catch a tiger cub without entering its cave.
%
温故知新 (Onko chishin)
Study the old to know the new.
%
自業自得 (Jigō jitoku)
You reap what you sow.
%
切磋琢磨 (Sessatakuma)
Mutual improvement through friendly rivalry.
%
七転び八起き (Nana korobi ya oki)
Fall seven times, get up eight.
%
雨降って地固まる (Ame futte ji katamaru)
After rain, the ground hardens.
%
苦あれば楽あり (Ku areba raku ari)
Where there is hardship, there is ease.
%
石の上にも三年 (Ishi no ue nimo san‑nen)
Sit on a stone for three years; patience pays.
%
継続は力なり (Keizoku wa chikara nari)
Continuity is power.
%
三日坊主 (Mikka bōzu)
A three‑day monk; someone who gives up quickly.
%
習うより慣れよ (Narau yori nareyo)
Better to grow accustomed than merely to learn.
%
雨垂れ石を穿つ (Amadare ishi o ugatsu)
Dripping water penetrates stone.
%
背水の陣 (Haisui no jin)
Fighting with your back to the river; a do‑or‑die position.
%
馬鹿は死ななきゃ治らない (Baka wa shinanakya naoranai)
Only death cures stupidity.
%
自ら墓穴を掘る (Mizukara boketsu o horu)
To dig your own grave.
%
死人に口なし (Shinin ni kuchinashi)
Dead men tell no tales.
%
危機一髪 (Kiki ippatsu)
A hair’s breadth from danger.
%
九死一生 (Kyūshi isshō)
Narrowly escaping death.
%
会者定離 (Esha jōri)
Those who meet must part.
%
儚い命 (Hakanai inochi)
A fleeting life.
%
猫に小判 (Neko ni koban)
Giving gold coins to a cat; offering something valuable to someone who does not appreciate it.
%
馬の耳に念仏 (Uma no mimi ni nenbutsu)
Buddhist sutras to a horse’s ear; preaching to the deaf.
%
出る杭は打たれる (Deru kui wa utareru)
The nail that sticks out gets hammered.
%
開いた口が塞がらない (Aita kuchi ga fusagaranai)
Cannot close your gaping mouth; you are speechless with shock.
%
月とすっぽん (Tsuki to suppon)
The moon and a soft‑shelled turtle; two things that are worlds apart.
%
藪から棒 (Yabu kara bō)
A stick from a thicket; something completely out of the blue.
%
猿も木から落ちる (Saru mo ki kara ochiru)
Even monkeys fall from trees; everyone makes mistakes.
%
蛙の子は蛙 (Kaeru no ko wa kaeru)
A frog’s child is a frog; like parent, like child.
#+end_src
* Hypridle
:PROPERTIES:
:header-args: :tangle  ~/.config/hypr/hypridle.conf
:END:

#+begin_src hyprlang
# hyprctl dispatch dpms on  
general {
    lock_cmd = pidof hyprlock || hyprlock       # avoid starting multiple hyprlock instances.
    # before_sleep_cmd = loginctl lock-session    # lock before suspend.
    # after_sleep_cmd = hyprctl dispatch dpms on  # to avoid having to press a key twice to turn on the display.
}
listener {
    # timeout = 300                            # in seconds.
    timeout = 600                            # in seconds.
    on-timeout = loginctl lock-session
    # on-resume = notify-send "Welcome back!"  # command to run when activity is detected after timeout has fired.
}

listener {
    # timeout = 150                                # 2.5min.
    timeout = 300                                # 2.5min.
    on-timeout = brightnessctl -s set 10         # set monitor backlight to minimum, avoid 0 on OLED monitor.
    on-resume = brightnessctl -r                 # monitor backlight restore.
}
# # turn off keyboard backlight, comment out this section if you dont have a keyboard backlight.
# listener { 
#     timeout = 150                                          # 2.5min.
#     on-timeout = brightnessctl -sd rgb:kbd_backlight set 0 # turn off keyboard backlight.
#     on-resume = brightnessctl -rd rgb:kbd_backlight        # turn on keyboard backlight.
# }
# listener {
#     timeout = 330                                 # 5.5min
#     on-timeout = hyprctl dispatch dpms off        # screen off when timeout has passed
#     on-resume = hyprctl dispatch dpms on          # screen on when activity is detected after timeout has fired.
# }
# listener {
#     timeout = 1800                                # 30min
#     on-timeout = systemctl suspend                # suspend pc
# }
#+end_src

* Hyprpaper
:PROPERTIES:
:header-args: :tangle  ~/.config/hypr/hyprpaper.conf
:END:

can u use source code (maybe elisp) to pick random image?
#+begin_src hyprlang
# preload=/tmp/anki
# https://wallpapersafari.com/w/izoh9I/download
# preload=~/Pictures/om.jpg
# wallpaper=,~/Pictures/om.jpg
# preload=~/Pictures/Beautiful Mountain Nature Colorful Scenery Minimalist 4k Wallpaper.jpg
# wallpaper=,~/Pictures/Beautiful Mountain Nature Colorful Scenery Minimalist 4k Wallpaper.jpg
# preload=~/Pictures/Wallpapers/Beautiful Mountain Nature Colorful Scenery Minimalist 4k Wallpaper_purple.jpg
preload=~/Pictures/Wallpapers/kanagawa_vaporwave.jpg
wallpaper=,~/Pictures/Wallpapers/kanagawa_vaporwave.jpg
# preload=~/Pictures/RxlwP.png
# wallpaper=,~/Pictures/RxlwP.png
# ipc = off
#+end_src

* hyprsunset
#+begin_src hyprlang :tangle ~/.config/hypr/hyprsunset.conf
max-gamma = 150

profile {
    time = 7:30
    identity = true
}

profile {
    time = 21:00
    temperature = 5500
    gamma = 0.8
}
#+end_src
