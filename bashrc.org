#+property: header-args :tangle ~/.bashrc
#+startup: content

* TODO TASK LIST
 - [ ] aliases and env vars shouldn't be bound to a specific shell...
 - [ ] maybe global shell file?

#+begin_src bash
# If not running interactively, don't do anything
[[ $- != *i* ]] && return

#+end_src

* Options
#+begin_src bash
shopt -s cdspell
# shopt -s checkwinsize
#+end_src

* Keymaps
#+begin_src bash
if [[ -n $DISPLAY ]]; then
  bind -x '"\ew": printf %s "$READLINE_LINE" | wl-copy -n'
  bind -x '"\C-xp": pwd | perl -pe "s/\Q$ENV{HOME}\E/~/" | wl-copy -n'
  # bind -x '"...": exec zsh
fi
#+end_src

** TODO Toggle shopts
https://github.com/ghostty-org/ghostty/discussions/5851
Use f13 like for neovim/emacs toggling keymaps
#+begin_src bash
# Toggle extglob (enable extended pattern matching)
# bind '"\C-xe": "\C-u shopt -q extglob && shopt -u extglob || shopt -s extglob\n"'
# bind -x '"\C-x/": "shopt -q extglob && shopt -u extglob || shopt -s extglob"'
# bind -x '"\C-x*": "shopt -q globstar && shopt -u globstar || shopt -s globstar"'
# stty wrap?
#+end_src

* Aliases
#+begin_src bash :noweb yes
<<sh.org:aliases()>>
#+end_src

* Functions
#+begin_src bash

function WTF {
# wtf -t comp $(cat /usr/share/games/bsdgames/acronyms.comp | cut -f1 | shuf -n1)
wtf  $(cat /usr/share/misc/acronyms.comp | cut -f1 | shuf -n1)
}


# PROMPT_COMMAND='printf "\033]133;A\007"'



info() {
path=`command info -w "$1"`
if [ $path == '*manpages*' ]; then
  emacsclient -t -a '' --eval "(progn (man \"$1\")(delete-window))"
else
  emacsclient -t -a ''  "$path"
fi
}
# man() {
#     emacsclient -t -e "(man \"$*\")"
# }


c() {
  if [ -t 0 ]; then
    # stdin is a terminal: act as paste (output clipboard)
    wl-paste
  else
    # stdin is piped: act as copy (input to clipboard)
    wl-copy
  fi
}


html2pdf() {
	typst compile <(rdrview -H "$1" | pandoc -f html -t typst) /dev/stdout | zathura -
}

# try the same w/ elisp/clojure
# ascii_quiz
aq() {
for (( ; ; )); do
	# line="$(nvim -es -V1 <<<'for i in range(0,127) | echo i.."\t"..strtrans(nr2char(i)) | endfor' |& grep -P ^\\d | shuf -n1)" &&
	line="$(nvim -es -V1 <<<'for i in range(0,127) | echo i.."\t"..keytrans(nr2char(i)) | endfor' |& grep -P ^\\d | shuf -n1)" &&
        awk '{print $2}' <<<"$line" && read -p $'\e[1mEnter code: > \e[0m' guessed_code 

	correct_code="$(awk '{print $1}' <<<"$line")"
	[ $correct_code == $guessed_code ] && echo "Correct" || echo "Wrong! ($correct_code)"
done
}

J(){
cd "$(fd -E \\.git -i -td '^'"$(sed 's/[][^\\."+*?()|{}$#&~-]/\\\0/' <<< "$1")"'.*$' ~/vimwiki | ifne sh -c 'awk "{print length,\$0}"|sort -k1,1n |cut -f1 --complement -d " "|fzf -1')"
}

adbvw() {

adb get-state 2>/dev/null | grep -q "device" || { notify-send "Not connected"; return 1; }

files=$(adb shell find /sdcard/Documents/Obsidian_vault/Data -maxdepth 1 -name '*.md')
[[ -z "$files" ]] && return 1;
dir=~/vimwiki/Obsidian_vault/phone
[ -d "$dir" ] && cd "$dir" || { notify-send "Directory doesn't exist"; return 1; }
for f in $files; do [[ -f "${f##*/}" ]] && adb pull "$f" "${f##*/}"_$(date +%s) || adb pull "$f" .;done
# attenzione agli spazi
adb shell rm $files
}


#+end_src

** Emacs-inspired
Magari usa stessi mapping di emacs nel terminal, tipo F15a per agenda?
#+begin_src bash
compile () {
    args="${*:-$(emacsclient --eval '(print compile-command nil)' \
                 | sed 's/^.//;s/.$//')}"  # strip outer quotes
    emacsclient -t --eval "(compile \"$args\")"
  }

edir () {
  target=${1:-$PWD}
    if [ ! -d "$target" ]; then
        echo "Not a directory: '$target'" >&2
        return 1
    fi
    emacsclient -a '' -t --eval "(progn (dired \"$target\") (wdired-change-to-wdired-mode))"
  }

eww () {
  emacsclient -t --eval "(eww \"$*\")"
}

agenda () {
    # emacsclient -t --eval "(progn (org-agenda-list)(kill-buffer "*dashboard*") (delete-other-windows))"
    # emacsclient -t --eval "(progn (org-agenda-list) (delete-other-windows)(kill-buffer "*dashboard*"))"
    emacsclient -t --eval "(progn (org-agenda-list) (delete-other-windows))"
}

magit () {
  target=${1:-$PWD}
  if ! git rev-parse --is-inside-work-tree &>/dev/null ; then
    echo "Not a git repository: '$target'" >&2
    return 1
  fi
  emacsclient -t --eval "(magit-status-setup-buffer \"$target\")"
}
#+end_src

* External commands
#+begin_src zsh :noweb yes
<<sh.org:commands(shell="bash")>>
#+end_src
