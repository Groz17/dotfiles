# -*- comment-start: "\""; -*-
#+property: header-args :tangle ~/.config/tridactyl/tridactylrc
#+startup: content

# neo_mouse_mode
* TODO TASK LIST
- [ ] add c-r c-{a/l} for current webpage url?
- [ ] clear cache for current site and all (uppercase)?
- [ ] configure website keybindings, so u can remove tweaks for yt addon
- [ ] implement youtube keybindings, like h in insert mode=arrow? so u can get rid of  extensions (what about values though?) maybe playerctl?
- [ ] automatically select first option?
- [ ] Make Tridactyl work on addons.mozilla.org (:h fixamo).
- [ ] userscript?

* OPTIONS
#+begin_src tridactyl
" Clear the config (is this really necessary?)
sanitise tridactyllocal tridactylsync

"" This will remove a lot of the FF regular UI
"" It can be surprising at first
""guiset_quiet gui none
""guiset_quiet statuspanel right

" you can use 2gt to switch to the second most recently used tab (so identical to <C-^>), 3gt to the third most recently used tab, etc. (#4595)
set tabsort mru

" Start with left-hand chars for fewer mouse interrupts
set hintchars fdsagvcxztrewqbhyjklnmuiop

" If you want to support e.g. French:
" set followpagepatterns.next ^(next|newer|prochain)\b|»|>>
" set followpagepatterns.prev ^(prev(ious)?|older|précédent)\b|«|<<
set followpagepatterns.next ^(next|newer|prochain)\b|»|>>
set followpagepatterns.prev ^(prev(ious)?|older|précédent)\b|«|<<

" set customthemes.custom span.TridactylHint { font-family: monospace !important; background: transparent !important; color: black !important; text-shadow: cyan -1px -1px 0px, cyan -1px 0px 0px, cyan -1px 1px 0px, cyan 1px -1px 0px, cyan 1px 0px 0px, cyan 1px 1px 0px, cyan 0px 1px 0px, cyan 0px -1px 0px !important; }
" Permitted values: run :composite js tri.styling.THEMES | fillcmdline to find out.
" set theme custom
set theme midnight
" set theme quake

#+end_src
 
** RSS
#+begin_src tridactyl
      #
# alias save_rss jsb -p tri.native.run("cat >> ~/.config.newsboat/urls", JS_ARG)
   # set rsscmd save_rss %u
#+end_src

** Proxy
proxies: any = o({// "socksName": "socks://hostname:port",// "socks4": "socks4://hostname:port",// "https": "https://username:password@hostname:port"})
You can add a new proxy with proxyadd proxyname proxyurl

#+begin_src tridactyl

set completions.Tab.statusstylepretty true
set modeindicatorshowkeys true

" set visualexitauto false
set visualexitauto true

"set homepages ["old.reddit.com"]
set homepages ["reddit.com","youtube.com"]

"" Smooth scrolling, yes please. This is still a bit janky in Tridactyl.
set smoothscroll true

"" set editorcmd to suckless terminal, or use the defaults on other platforms
""js tri.browserBg.runtime.getPlatformInfo().then(os=>{const editorcmd = os.os=="linux" ? "st vim" : "auto"; tri.config.set("editorcmd", editorcmd)})

"" Testing this one for now...
""set hintfiltermode vimperator-reflow
""set hintnames numeric

set editorcmd emacsclient -a \"\" -c -e '(progn (find-file "%f") (forward-line (1- %l)) (forward-char %c))'

#+end_src

* BINDS
#+begin_src tridactyl
" bind --mode=$mode $key $excmd
" magari C-z like emacs
bind i mode ignore
" metti fra le prime cosi runna subito"
bind --mode=ignore <esc> composite mode normal

bind --mode=browser <f12>m jsua browser.sidebarAction.open(); tri.excmds.sidebaropen("https://mail.google.com/mail/mu")

" it works: zoom -0.05 true
" maybe consider swap mappigs? j -> down -> zoomin?
bind <c-k> zoom 0.1 true
bind --mode=insert <c-k> zoom 0.1 true
" bind . zoom 0.1 true
bind <c-j> zoom -0.1 true
bind --mode=insert <c-j> zoom -0.1 true

" bind , zoom -0.1 true

bind b fillcmdline bmarks
bind B fillcmdline bmarks -t

bind !! fillcmdline exclaim

unbind --mode=ex <Tab>
unbind gf
unbind <space>
" i use C-i
unbind <Backspace>

" VISUAL
" bind --mode=visual c composite js.document.getSelection().toString() | send to todo
" bind --mode=visual C composite js.document.getSelection().toString() | send to todo no newline
" bind --mode=visual q composite js.document.getSelection().toString() | send to qr code

" bind --mode=visual Y composite js.document.getSelection().toString() | yank markdown?
bind yH composite hint -pipe * innerHTML | yank

" 3gt to the third most recently used tab
" set keyboardlayoutforce true

"colourscheme base16-phd
"colourscheme base16-green-screen
"colourscheme base16-dracula
" colourscheme midnight

" https://github.com/tridactyl/tridactyl/issues/158 (youtube videos extension with shortcut)

" autocmd DocStart youtube\.com/watch\?v=.* mode ignore

"" REDIRECTS " ┣
#+end_src

** Bindurls
#+begin_src tridactyl
"" Make hackernews less noisy
alias ff_hn_bg hint -Jbc .titleline > a , .subline > a:nth-of-type(4), .morelink, .pagetop a, .titleline a
alias ff_hn hint -Jc .titleline > a , .subline > a:nth-of-type(4), .morelink, .pagetop a, .titleline a
alias ff_hn_to hint -Jc .titleline > a , .morelink
bindurl news.ycombinator.com f ff_hn_to
bindurl news.ycombinator.com F hint


" " Only hint search results on Google and DDG and StartPage
bindurl www.google.com f hint -Jc #search div:not(.action-menu) > a
bindurl www.google.com F hint -Jbc #search div:not(.action-menu) > a
bindurl ^https://duckduckgo.com f hint -Jc [data-testid="result-title-a"]
bindurl ^https://duckduckgo.com F hint -Jbc [data-testid="result-title-a"]
bindurl www.startpage.com f hint -Jc .w-gl__result-second-line-container > a , .pagination__num , .next, .prev
bindurl www.startpage.com F hint -Jbc .w-gl__result-second-line-container > a , .pagination__num , .next, .prev
 
#+end_src

** [[https://github.com/yashasolutions/tridactylmode/blob/master/sample-tridactylrc.tri][Emacs-inspired]]
#+begin_src tridactyl

unbind <F12>

" Edit field in external editor
bind --mode=insert <C-c>' editor
bind --mode=insert <C-c><C-c> editor
bind --mode=input <C-c><C-c> editor

bind --mode=input <F12><C-c> composite sanitise tridactyllocal; winclose

bind --mode=insert <C-g> composite unfocus | mode normal
# bind --mode=visual <A-w> composite js document.getSelection().toString() | clipboard yank
bind --mode=insert <F12>h js document.activeElement.select()

bind --mode=browser <C-g> escapehatch

" Hinting
bind f hint
" bind <C-u>f hint -b
bind c hint -y
bind w clipboard yank
bind --mode=hint <C-g> hint.reset
bind --mode=hint <C-n> hint.focusBottomHint
bind --mode=hint <C-p> hint.focusTopHint
bind --mode=hint <C-f> hint.focusRightHint
bind --mode=hint <C-b> hint.focusLeftHint
" bind --mode=insert <C-u>f hint -t

" bind <C-i> focusinput -l

" Bookmarks
bind M current_url bmark
bind <F12>rj fillcmdline bmarks
" bind <C-u><F12>rj fillcmdline bmarks -t
bind <F12>rm current_url bmark

" Help
bind <f18>h help
bind <f18>b fillcmdline help -b
bind <f18>f fillcmdline help -e
bind <f18>v fillcmdline help -s

alias describe help

"" Fighting against old habit
bind --mode=normal <C-w> js alert("<C-w> remapped to C-x 0")
bind --mode=normal <C-l> js alert("Use the minibuffer instead")
bind --mode=normal <C-t> js alert("Use the minibuffer instead")

"" Emacs style command minibuffer
bind <A-x> fillcmdline_notrail

"" Close current tab ala emacs
unbind --mode=normal <F12>
bind <F12>0 winclose 
bind <F12>k tabclose
bind <F12>o fillcmdline t
# bind <F12>h js document.execCommand('selectAll', false, null)
# TODO: falla anche per input/ex/insert (hard on chatgpt website?)
bind <F12>h js window.getSelection().selectAllChildren(document.body);



""bind <Escape><C-s> fillcmdline find
""bind <C-s><C-s> findnext
""bind <C-g> clearsearchhighlight
""bind <Escape><Escape> composite mode normal ; hidecmdline

""bind <F12>l tabnext
""bind <F12>h tabprev
bind <F12>b fillcmdline bufferall
""bind <Space><Space> fillcmdline buffer
bind <F12>1 tabdetach 
bind <F12>tm mute toggle
bind <F12>u undo
bind <C-/> undo

"" C-n and C-p require patching FF
"" C-k cannot be used even after a patch... go figure
bind --mode=ex     <C-n> ex.next_completion
bind --mode=ex     <C-p> ex.prev_completion
bind --mode=ex     <C-y> ex.insert_completion
# bind --mode=ex     <C-e> ex.deselect_completion
# bind --mode=ex     <Tab> ex.complete
bind --mode=ex     <C-g> composite text.beginning_of_line ; text.forward_word ; text.kill_word



#+end_src



** PERSONAL SCRIPTS

#+begin_src tridactyl
bind --mode=normal <space>a composite get_current_url | shellescape | exclaim_quiet ~/.config/tridactyl/append
bind --mode=normal <space>A composite get_current_url | shellescape | exclaim_quiet ~/.config/tridactyl/append_no_space
" Clipboard mapping?
" bind <space>c exclaim_quiet sh -c 'printf '\n%s\n' "$(wl-paste)" >> ~/todo && notify-send "Sent Clipboard"'
" bind <space>c exclaim_quiet sh -c 'echo >> ~/todo && echo "$(wl-paste)" >> ~/todo && notify-send "Sent Clipboard"'
" bind <space>c exclaim_quiet sh -c 'echo >> ~/todo && clip="$(wl-paste)" && echo "$clip" >> ~/todo && notify-send "Sent Clipboard"'
bind --mode=normal <space>c exclaim_quiet bash -c 'clip="$(wl-paste)" && echo >> ~/todo/todo.txt && echo "$clip" >> ~/todo/todo.txt && notify-send "Sent Clipboard" "$clip"'
" bind <space>C exclaim_quiet sh -c 'echo "$(wl-paste)" >> ~/todo && notify-send "Sent Clipboard (No Newline)"'
bind <space>C exclaim_quiet bash -c 'clip="$(wl-paste)" && echo "$clip" >> ~/todo/todo.txt && notify-send "Sent Clipboard (No Newline)" "$clip"'

bind --mode=normal <space>s composite get_current_url | shellescape | exclaim_quiet ~/.config/tridactyl/scripts/subs

" https://github.com/moyiz/git-dev.nvim
# bind <space>go composite get_current_url | shellescape | js -p tri.excmds.exclaim(process.env.TERM_PROGRAM + " -e nvim -c \'GitDevOpen " + JS_ARG + "\'")
bind <space>go composite get_current_url | shellescape | js -p tri.excmds.exclaim("ghostty -e nvim -c \'GitDevOpen " + JS_ARG + "\'")

# bind <a-w> composite get_current_url | exclaim_quiet  ~/scripts/to_markdown/browser/webpage

" add another mapping that prepends the url (source)
" would be cool to send the selection to todo and the title (with # prefixed) + selection to tips
bind --mode=visual <a-w> composite js -s ~/.config/tridactyl/scripts/selection_html.js ; exclaim_quiet  ~/.config/tridactyl/scripts/to-markdown
bind >2 composite get_current_url | exclaim /home/giorgio/scripts/browser/2pdf

bind yn composite js document.location.href.replace(/https?:\/\//,"git@").replace("/",":").replace(/$/,".git") | clipboard yank

" Git{Hub,Lab} git clone via SSH yank
" bind yg composite js "git clone " + document.location.href.replace(/https?:\/\//,"git@").replace("/",":").replace(/$/,".git") | clipboard yank

" usa exclaim_quiet per non avere output nella command line
bind <space>d composite get_current_url | exclaim_quiet ~/.config/tridactyl/scripts/download
"bind <space><space> composite get_current_url | yank ; exclaim_quiet hyprctl dispatch exec '[float\;size 30% 30%] ghostty -e nvim -c "norm 1 Qd"'
" bug mozilla newtab bind <space><space> jsb tri.native.run(`echo '${document.location.href}' | wl-copy && hyprctl dispatch exec '[float;size 30% 30%] ghostty -e nvim -c "norm 1 Qd"'`)
bind <space><space> js tri.excmds.yank(document.location.href); tri.native.run(`hyprctl dispatch exec '[float;size 30% 30%] ghostty -e nvim -c "norm 1 Qd"'`)

bind <space><S-space> composite js "# [" + document.title + "](" + document.URL + ")" | yank ; exclaim_quiet ~/.config/tridactyl/scripts/data

#+end_src

#+begin_src bash :tangle ~/.config/tridactyl/scripts/data
#!/usr/bin/env bash
for id in $(cliphist list|head -2|cut -f1); do cliphist decode $id;echo; done | wl-copy
hyprctl dispatch exec '[float;size 30% 30%] ghostty -e nvim -c "norm 1 Qy"'
#+end_src

#+begin_src tridactyl

" crea mapping per inserire plugin in lazy e copiare la configurazione in <plugin_name>lua così da poter usare il plugin subito...

bind yp composite get_current_url | exclaim_quiet ~/.config/nvim/scripts/clone_from_browser

" magari usa un unico binding per copiare url da website e filtrarli...
bind <a-x> exclaim_quiet ~/scripts/filtra_tabs.sh

" get all urls in page (<a-z> the ones filtered by regex [copylinks++]; create another script with those regex and delete the add-on)
" bind <a-a> js -s ~/Projects/src/JavaScript/urls.js
bind <a-a> js -s ~/scripts/to_markdown/browser/urls_all.js
bind <a-l> js -s ~/scripts/to_markdown/browser/urls_linux.js
" bind <a-z> js -s ~/Projects/src/JavaScript/urls_regex.js


#+end_src

* SEARCHURLS
#+begin_src tridactyl
" use ai to categorize
" set searchengine g

#+end_src
# set jsurls.googleloud query => "https://google.com/search?q=" + query.toUpperCase()
** Wikis
#+begin_src tridactyl
set searchurls.wg https//wiki.gentoo.org/index.php?title=Special%3ASearch&profile=default&fulltext=Search&search=
set searchurls.wa https://wiki.archlinux.org/index.php?title=Special%3ASearch&search=%s
" set searchurls.wp https://en.wikipedia.org/wiki/Special:Search?search=%s&go=Go
" set searchurls.wi https://en.wiktionary.org/wiki/Special:Search?search=%s&go=Go
set searchurls.aw https://wiki.archlinux.org/index.php?search=%s
set searchurls.w https://en.wikipedia.org/w/index.php?search=%s&title=Special%3ASearch
set searchurls.wi https://it.wikipedia.org/w/index.php?search=%s&title=Special%3ASearch
set searchurls.wd  https://en.wiktionary.org/wiki/?search=%s

set searchurls.de  https://devdocs.io/#q=

#+end_src

** News/Media
#+begin_src tridactyl

#+end_src

** E-commerce
#+begin_src tridactyl

#+end_src

** Social media
#+begin_src tridactyl

#+end_src

** LLM
#+begin_src tridactyl
#+end_src

** Entertainment
#+begin_src tridactyl

" set searchurls.alt https://alternativeto.net/browse/search?q=%s
" set searchurls.af https://www.acronymfinder.com/~/search/af.aspx?string=exact&Acronym=%s
" set searchurls.ar https://archive.is/search/?q=%s
" set searchurls.gi https://www.google.ca/search?tbm=isch&safe=off&q=%s
" set searchurls.gl https://www.google.com/search?btnI=I%27m+Feeling+Lucky&q=%s
" set searchurls.gm https://www.google.ca/maps?q=%s
" set searchurls.gn https://news.google.ca/news?hl=en&num=30&q=%s&btnG=Search+News
" set searchurls.m https://search.marginalia.nu/search?js=&adtech=&profile=&query=%s
" set searchurls.mc https://www.google.ca/search?num=20&q=%s%20site:metacritic.com
" set searchurls.ol https://www.onelook.com/?w=%s&ls=b
" set searchurls.rr https://www.royalroad.com/fictions/search?title=%s
" set searchurls.su https://summarist.ai/summary/%s
" set searchurls.th https://www.thesaurus.com/browse/%s
" set searchurls.tr https://translate.google.com/?op=translate&text=%s&sl=auto&tl=en
" set searchurls.tu https://translate.google.com/translate?hl=en&u=%s&sl=auto&tl=en
" set searchurls.tw https://twitter.com/search?q=%s
" set searchurls.txt https://www.google.ca/search?q=cache:%s&strip=1
" set searchurls.ud https://www.urbandictionary.com/define.php?term=%s
" set searchurls.wa https://www.wolframalpha.com/input/?i=%s
" set searchurls.wb https://web.archive.org/web/*/%s
" set searchurls.yt https://www.youtube.com/results?search_query=%s

"set searchurls.bl https://www.browserling.com/browse/win/7/chrome/72/%s
"set searchurls.dv https://www.dividend.com/search?q=%s
"set searchurls.gd https://drive.google.com/drive/search?q=%s
"set searchurls.ll https://lucidlife.wordpress.com/?s=%s
"set searchurls.rd https://www.reddit.com/search?q=%s
"set searchurls.sd https://slickdeals.net/newsearch.php?rating=2&q=%s
"set searchurls.st https://stocktwits.com/symbol/%s
"set searchurls.tv https://www.tradingview.com/chart/?symbol=%s
"set searchurls.yf https://finance.yahoo.com/quote/%s
"set searchurls.yt https://www.youtube.com/results?search_query=%s

set searchurls.alt https://alternativeto.net/browse/search/?q=
set searchurls.af https://www.acronymfinder.com/~/search/af.aspx?string=exact&Acronym=%s
set searchurls.ar https://archive.is/search/?q=%s
set searchurls.boardgamegeek https://boardgamegeek.com/geeksearch.php?action=search&objecttype=boardgame&q=
set searchurls.boardgameprices https://boardgameprices.com/compare-prices-for?q=
set searchurls.boardgamepricesuk https://boardgameprices.co.uk/item/search?search=
set searchurls.booksprice https://booksprice.com/compare.do?inputData=
set searchurls.bookspriceuk http://booksprice.co.uk/compare.do?inputData=
set searchurls.chambersbiog https://chambers.co.uk/search/?query=%s&title=biog
set searchurls.chambersdict https://chambers.co.uk/search/?query=%s&title=21st
set searchurls.chambersthes https://chambers.co.uk/search/?query=%s&title=thes
set searchurls.ebay https://www.ebay.com/sch/i.html?_nkw=
set searchurls.ebayuk https://www.ebay.co.uk/sch/i.html?_nkw=
set searchurls.etymonline https://www.etymonline.com/search?q=
set searchurls.goodreads https://www.goodreads.com/search?q=
set searchurls.hotukdeals https://www.hotukdeals.com/search?q=
set searchurls.oeis https://oeis.org/search?q=
set searchurls.powerthesaurus https://www.powerthesaurus.org/_search?q=

" crea binding per scaricare canzone in ~/Music [yt-dlp]
set searchurls.yt https://www.youtube.com/results?search_query=%s
" set searchurls.yT https://www.youtube.com/results?search_query=%s&sp=CAM%253D
set searchurls.ys https://www.youtube.com/results?search_query=%s&sp=CAM%253D
" qualcosa tipo yt ... m per i risultati con il most viewed filter (o yt ... u per upload date)
" set searchurls.gh https://github.com/search?q=%s

#+end_src

** GitHub
#+begin_src tridactyl
set searchurls.gh https://github.com/search?q=%s

set searchurls.gg https://github.com/search?q=%s&type=code
" search for vim code
set searchurls.ggv https://github.com/search?q=%s+lang%3A"Vim+script"+&type=code
" search for lua code
set searchurls.ggl https://github.com/search?q=%s+lang%3ALua+&type=code
" search for elisp code
set searchurls.gge https://github.com/search?q=%s+lang%3A"Emacs+lisp"+&type=code

" regex
set searchurls.g/ https://github.com/search?q=%2F%s%2F&type=code
set searchurls.gr https://github.com/search?q=%s&type=repositories
set searchurls.gi https://github.com/search?q=%s&type=issues
set searchurls.gp https://github.com/search?q=%s&type=pullrequests
set searchurls.gd https://github.com/search?q=%s&type=discussions
set searchurls.gu https://github.com/search?q=%s&type=users
set searchurls.gc https://github.com/search?q=%s&type=commits
set searchurls.gk https://github.com/search?q=%s&type=registrypackages
set searchurls.gw https://github.com/search?q=%s&type=wikis
set searchurls.gt https://github.com/search?q=%s&type=topics
set searchurls.gm https://github.com/search?q=%s&type=marketplace

#+end_src

** Google
#+begin_src tridactyl
set searchurls.g https://www.google.ca/search?safe=off&num=20&q=%s
set searchurls.gc https://www.google.ca/search?q=cache:%s
set searchurls.gi https://www.google.ca/search?tbm=isch&safe=off&q=%s

" set searchurls.fc https://toolbox.google.com/factcheck/explorer/%s;hl=en
" set searchurls.g https://www.google.ca/search?safe=off&num=20&q=%s
" set searchurls.gc https://www.google.ca/search?q=cache:%s

#+end_src
** Languages
#+begin_src tridactyl

set searchurls.fc https://toolbox.google.com/factcheck/explorer/%s;hl=en
" annulla startinsert con questo mapping (visto che la stringa è stata già cercata)
set searchurls.wr https://www.wordreference.com/enit/%s
" how to do smth like wr word1 word2 and have tridactyl open two tabs with the wordreference search set to word1 for the first and word2 for the second?
" for typing mistakes?
" would be cool to search with wordrefrence with the currently selected word; also the s mapping seems wasted (use for ex. <a-s> or <a-e> (exact) when pressing o to search exactly) and it matches with leap.nvim (think about it...)
" set searchurls.Wr https://www.wordreference.com/enit/%s
" set searchurls.WR https://www.wordreference.com/enit/%s
" set searchurls.wR https://www.wordreference.com/enit/%s
set searchurls.wrs https://www.wordreference.com/esit/%s
" set searchurls.wrs https://www.wordreference.com/enes/%s
" set searchurls.wrs https://www.wordreference.com/ites/%s
set searchurls.wrS https://www.wordreference.com/esen/%s
" set searchurls.wrS https://www.wordreference.com/esen/%s
" set searchurls.wrS https://www.wordreference.com/esit/%s
set searchurls.wrr https://www.wordreference.com/ruit/%s
set searchurls.wrR https://www.wordreference.com/ruen/%s
set searchurls.wra https://www.wordreference.com/enar/%s
set searchurls.ur https://www.urbandictionary.com/define.php?term=%s
" set searchurls.a https://www.amazon.it/s?k=%s&__mk_it_IT=%C3%85M%C3%85%C5%BD%C3%95%C3%91&ref=nb_sb_noss
set searchurls.az https://www.amazon.it/s?k=%s&__mk_it_IT=%C3%85M%C3%85%C5%BD%C3%95%C3%91&ref=nb_sb_noss
" fai in modo che digitando rd ti compaia la history di reddit filtrata con quello che stai scrivendo [fallo per tutti le altre "keyword"]
set searchurls.rd https://www.reddit.com/search?q=%s
set searchurls.rdn https://www.reddit.com/r/neovim/search/?q=%s&restrict_sr=1

" twitter?
set searchurls.tw https://twitter.com/search?q=%s&src=typed_query

set searchurls.tr https://www.treccani.it/vocabolario/%s

" google images (would be nice to only have a one-key mapping like o...)
set searchurls.im  http://www.google.com/search?tbm=isch&q=%s
" set searchurls.im  https://lens.google.com/search
#+end_src
** Search engines
#+begin_src tridactyl
set searchurls.googleuk https://www.google.co.uk/search?q=
set searchurls.yahoo https://search.yahoo.com/search?p=
set searchurls.twitter https://twitter.com/search?q=
set searchurls.wikipedia https://en.wikipedia.org/wiki/SpecialSearch/
set searchurls.amazon https://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=
set searchurls.amazonuk https://www.amazon.co.uk/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=
set searchurls.startpage https://startpage.com/do/search?language=english&cat=web&query=
set searchurls.github https://github.com/search?utf8=✓&q=
set searchurls.searx https://searx.me/?category_general=on&q=
set searchurls.cnrtl http//www.cnrtl.fr/lexicographie/
set searchurls.osm https://www.openstreetmap.org/search?query=
set searchurls.mdn https://developer.mozilla.org/en-US/search?q=
set searchurls.gentoo_wiki https://wiki.gentoo.org/index.php?title=Special%3ASearch&profile=default&fulltext=Search&search=
set searchurls.qwant https://www.qwant.com/?q=

#+end_src

* MOVEMENT
#+begin_src tridactyl

" The default jump of 10 is a bit much.
" bind j scrollline 3
" bind k scrollline -3

bind % scrollto 50
bind 0 scrollto 0 x

bind e fillcmdline goto

#+end_src

** TAB MANAGEMENT
#+begin_src tridactyl
bind U tabuniq

bind / fillcmdline find
bind ? fillcmdline find -reverse
bind n findnext --search-from-view
bind N findnext --reverse --search-from-view

"urlmodify
" bind <a-s> js tri.excmds.urlmodify("-r", "^", "https://web.archive.org/save/")
" find a way to save it to your web archive as well
" bind <a-s> urlmodify -r ^ https://web.archive.org/save/

"A non integer string means to search the URL and title for matches, in this window if called from tab, all windows if called from anytab. Title matches can contain '*' as a wildcard.
bind T fillcmdline tab
bind O fillcmdline tabopen
" bind O fillcmdline tabopen -b
bind ge current_url open
bind gE current_url tabopen

"bind ZZ composite tabonly | tabclose

" successivo, prossimo, etc...
bind {{ composite tabduplicate | followpage prev
bind }} composite tabduplicate | followpage next

" bind <c-^> tab #
bind ^ tab #
" why not, faster
bind # tab #
" bind 2^ -> go back 2 pages
" bind <n>^ -> go back n pages

"I hate myself
bind 2>> tabmove +2
bind 2<< tabmove -2

" go to middle tab on the screenwidth (not only on the middle of first screen!!!)
bind gm tab 12 

" move to last
" bind >$

" move to first
" bind <0

" << and >> should take a count!

" cmds are also split with semicolons (;) and don't pass things along to each other.
" bind x composite tabnext ; tabclose ; tab #
" bind x composite tabnext ; tabclose
bind x composite tabnext ; tabclose ; tab #
" bind X composite tabprev ; tabclose
bind X composite tabprev ; tabclose

" bind \p hint -wp
" bind \t fillcmdline tabpush
" bind \T fillcmdline tabgrab

"" Scroll to next/prev section with }/{
" bind { js (function() { var prevTargetElements = document.querySelectorAll('h1, h2, h3, h4, h5, h6, hr, section, article, aside, nav, header, main'); var currentY = window.scrollY; for (var i = prevTargetElements.length - 1; i >= 0; i--) { var pElementY = prevTargetElements[i].getBoundingClientRect().top + window.scrollY; if (pElementY < currentY) { window.scrollTo({ top: pElementY, behavior: 'smooth' }); break; } } })();
" bind } js (function() { var nextTargetElements = document.querySelectorAll('h1, h2, h3, h4, h5, h6, hr, section, article, aside, nav, header, main'); var currentY = window.scrollY; for (var i = 0; i < nextTargetElements.length; i++) { var nElementY = nextTargetElements[i].getBoundingClientRect().top + window.scrollY; if (nElementY > (currentY+1)) { window.scrollTo({ top: nElementY, behavior: 'smooth', block: 'start' }); break; } } })();

" Media
bind <A-]> js document.querySelector('video').playbackRate+=0.25
bind <A-[> js document.querySelector('video').playbackRate-=0.25
bind <A-=> js document.querySelector('video').playbackRate=1

" Open right click menu on links. Based on https://github.com/tridactyl/tridactyl/blob/master/.tridactylrc#L86
" bind ;C composite hint -; !s xdotool key Menu
" bind ;c hint -c [class*="expand"],[class="togg"],[class="comment_folder"]
" bind ;u hint -Jc [class*="arrow"]
" bind ga js void(open('https://archive.is/search/?q='+encodeURIComponent(document.location)))
" bind gc composite get_current_url | tabopen gc
" bind gT js void(open('https://translate.google.com/translate?hl=en&sl=auto&tl=en&u='+encodeURIComponent(document.location)))
" bind <A-t> composite hint -W | js -p tri.excmds.open('https://translate.google.com/translate?hl=en&sl=auto&tl=en&u=' + JS_ARG)

" TODO: fix
bindurl inoreader.com --mode=normal ;; hint -;c .reader_pane_sinner,tree_pane

autocmd DocStart canary.discord.com mode ignore
autocmd DocStart ptb.discord.com mode ignore
autocmd DocStart www.codecademy.com mode ignore

" bind D tabclose and open right tab// bind d tabclose and open left tab?

"https://github-wiki-see.page/m/tridactyl/tridactyl/wiki/Adding-your-own-functionality
command tabcloseallbykeyword jsb -p browser.tabs.query({}).then(tabs => tabs.forEach( t => { if(t.url.includes(JS_ARG)) browser.tabs.remove(t.id) }))

bind D fillcmdline tabcloseallbykeyword 

" ^ esiste per un motivo
" bind d tabclose

" doesn't work with reddit tho...
" bind gr reader?

"bind d composite tabclose; tabprev; tabprev; tabprev; tabprev

" Close current tab and switch to most recent previous tab (modify default behaviour)
" bind d composite tabclose | tab #

bind gx$ tabcloseallto right
" D
bind gx0 tabcloseallto left
" <M-->D like <M-->C-k in emacs

bind gP composite clipboard tabopen ; tab #

" Make gu take you back to subreddit from comments
"bindurl reddit.com gu urlparent 4

" Handy multiwindow/multitasking binds
bind gd tabdetach
bind gD composite tabduplicate ; tabdetach

" go private
" bind gp current_url winopen -popup -private
" go incognito (vimium mapping)
bind gI current_url winopen -popup -private

" bind ;t ttsread -c title
bind <space>t fillcmdline ttsread -t

" l for listen
" bind ,l js -p tri.excmds.shellescape(JS_ARG).then(url => tri.excmds.exclaim_quiet('mpv --no-video --no-terminal ' + url))
alias mpvsafel js -p tri.excmds.shellescape(JS_ARG).then(url => tri.excmds.exclaim_quiet('mpv --no-video --no-terminal ' + url))
bind ,l hint -W mpvsafel

bind gs viewsource

"bind yG 

" maybe use t to translate selection to another language, like tr for russian, ta for arabic, ts (or maybe te for español) for spanish, etc..."

" TABGROUP
" would be cool to add tabs to group by regex, like .*youtube.* to youtube group...
" bind t tabopen
unbind t
bind tA tabgroupabort
bind tc fillcmdline tabgroupcreate
" bind tx fillcmdline tabgroupclose
" q perche x e troppo vicino a c e perche q e piu diffile da raggiungere
bind tq fillcmdline tabgroupclose
bind ts fillcmdline tabgroupswitch
bind tm fillcmdline tabgroupmove
bind tr fillcmdline tabgrouprename

" bind tl tabgrouplast

  ,*** TABGROUP
" bind ta tgroupswitch emacs
" bind tr tgroupswitch life
" bind ts tgroupswitch learn
" bind tt tgroupswitch prog
" bind td tgroupswitch dots
" bind tn tgroupswitch wr
" bind te tgroupswitch cons
" bind ti tgroupswitch buy

#+end_src

* READLINE
#+begin_src tridactyl

"bind --mode=hint <A-j> hint.focusNextHint
"bind --mode=hint <A-k> hint.focusPreviousHint

bind --mode=ex <c-g> ex.hide_and_clear

bind --mode=ex <c-j> ex.next_completion
bind --mode=ex <c-k> ex.prev_completion
bind --mode=ex <C-Enter> ex.execute_ex_on_completion
": string = ""
"unbind --mode=ex <Tab>
"unbind --mode=ex <c-a>
unbind --mode=ex <c-f>
# bind --mode=ex <Tab> ex.complete
bind --mode=ex <c-n> ex.next_history
bind --mode=ex <c-p> ex.prev_history

" check ivy-keymaps?
bind --mode=ex <c-Enter> ex.next_completion ; ex.accept_line

"for chatgpt
" basically cr: s-cr, <c-c><c-c>: cr"
"bind --mode=insert      <C-c><C-c>   return
" bindurl chatgpt\.com/ <c-c> js tri.excmds.yank(document.querySelector('.player-timedtext').innerText.replace("\n", ""))
" bindurl chatgpt\.com/ <cr> <s-cr>

# bind --mode=insert  ?  ex.accept_line
# bind --mode=input   ?  ex.accept_line

"insert mode is entered by clicking on text areas while input mode is entered by using gi
"readline ftw
bind --mode=ex          <C-a>   text.beginning_of_line
bind --mode=insert      <C-a>   text.beginning_of_line
bind --mode=input       <C-a>   text.beginning_of_line
bind --mode=ex          <C-e>   text.end_of_line
bind --mode=insert      <C-e>   text.end_of_line
bind --mode=input       <C-e>   text.end_of_line
bind --mode=ex          <C-f>   text.forward_char
bind --mode=insert      <C-f>   text.forward_char
bind --mode=input       <C-f>   text.forward_char
bind --mode=ex          <C-b>   text.backward_char
bind --mode=insert      <C-b>   text.backward_char
bind --mode=input       <C-b>   text.backward_char
# bind --mode=ex          <C-k>   text.kill_line
# bind --mode=insert      <C-k>   text.kill_line
# bind --mode=input       <C-k>   text.kill_line
bind --mode=ex          <A-d>   text.kill_word
bind --mode=insert      <A-d>   text.kill_word
bind --mode=input       <A-d>   text.kill_word
bind --mode=ex          <C-u>   text.backward_kill_line
bind --mode=insert      <C-u>   text.backward_kill_line
bind --mode=input       <C-u>   text.backward_kill_line
# bind --mode=ex          <Tab>   text.tab_insert
# bind --mode=insert      <Tab>   text.tab_insert
# bind --mode=input       <Tab>   text.tab_insert
bind --mode=ex          <C-y>   composite getclip selection | text.insert_text
bind --mode=insert      <C-y>   composite getclip selection | text.insert_text
bind --mode=input       <C-y>   composite getclip selection | text.insert_text
bind --mode=ex          <A-c>   text.capitalize_word
bind --mode=insert      <A-c>   text.capitalize_word
bind --mode=input       <A-c>   text.capitalize_word
bind --mode=ex          <A-l>   text.downcase_word
bind --mode=insert      <A-l>   text.downcase_word
bind --mode=input       <A-l>   text.downcase_word
bind --mode=ex          <A-u>   text.upcase_word
bind --mode=insert      <A-u>   text.upcase_word
bind --mode=input       <A-u>   text.upcase_word
bind --mode=ex          <C-h>   text.delete_backward_char
bind --mode=insert      <C-h>   text.delete_backward_char
bind --mode=input       <C-h>   text.delete_backward_char
bind --mode=ex          <C-d>   text.delete_char
bind --mode=insert      <C-d>   text.delete_char
bind --mode=input       <C-d>   text.delete_char
bind --mode=ex          <C-t>   text.transpose_chars
bind --mode=insert      <C-t>   text.transpose_chars
bind --mode=input       <C-t>   text.transpose_chars
bind --mode=ex          <A-t>   text.transpose_words
bind --mode=insert      <A-t>   text.transpose_words
bind --mode=input       <A-t>   text.transpose_words
bind --mode=ex          <A-b>   text.backward_word
bind --mode=insert      <A-b>   text.backward_word
bind --mode=input       <A-b>   text.backward_word
bind --mode=ex          <A-f>   text.forward_word
bind --mode=insert      <A-f>   text.forward_word
bind --mode=input       <A-f>   text.forward_word
bind --mode=ex          <C-w>   text.backward_kill_word
bind --mode=insert      <C-w>   text.backward_kill_word
bind --mode=input       <C-w>   text.backward_kill_word
bind --mode=ex          <A-Backspace>   text.backward_kill_word
bind --mode=insert      <A-Backspace>   text.backward_kill_word
bind --mode=input       <A-Backspace>   text.backward_kill_word

bind --mode=ex          <A-i>   ex.insert_completion
# bind --mode=ex          <Tab>   ex.insert_completion
"bind --mode=ex          <C-e>   ex.deselect_completion

" bind --mode=insert <C-j> !s xdotool key Down
" bind --mode=insert <C-k> !s xdotool key Up

bind --mode=ex      <c-l>  ex.accept_line
bind --mode=insert  <c-l>  ex.accept_line
bind --mode=input   <c-l>  ex.accept_line

#+end_src

* HINTS

#+begin_src tridactyl
"JavaScript hints (grey ones) 

bind <a-r> fillcmdline hint -fr 

bind yf hint -y

"bind ,/ fillcmdline hint -fr 

" lo uso per neovim, c'è gia gF
bind <a-f> hint -qb
"bind yF hint -yq

bind ;/ fillcmdline hint -bfr 

alias join js -p JS_ARG.join("\n")
" Make it so that if you press a key twice, it clears that entry from the clipboard
bind yF composite hint -qpipe a href | join | yank

" Only hint search results on Google and DDG
"bindurl www.google.com f hint -Jc .rc > .r > a
"bindurl www.google.com F hint -Jbc .rc>.r>a

" bind ... hint -frk
#+end_src

* AUTOCMDS
** URL redirects
#+begin_src tridactyl
" autocmd DocStart reddit\.com/.*tl=it urlmodify -Q tl
autocmd DocStart reddit\.com/.*tl=* urlmodify -Q tl

autocmd DocStart github\.com/.*?tab=readme-ov-file urlmodify -Q tab

" autocmd BeforeRequest *tl=it (u) => ({redirectUrl: e.url.replace("tl=it","")}).
" autocmd BeforeRequest *://*.reddit.com/* (u) => ({if(u.url.match("[?|&]tl=it")) {redirectUrl: u.url.replace("tl=it","")}}).
" autocmd DocStart chatgpt\.com kill initiali popup
" autocmd DocStart chatgpt.com js document.querySelector("a .cursor-pointer").click()
" <a href="#" class="mt-5 cursor-pointer text-sm font-semibold text-token-text-secondary underline">Stay logged out</a>

"bind <space><space> exclaim ~/bin/screenshoot_firefox
" bind ,s exclaim ~/bin/screenshoot_firefox

"like in vim
bind gO fillcmdline goto

bind gi focusinput

""autocmd DocStart ^http(s?)://www.reddit.com js tri.excmds.urlmodify("-t", "www", "old")
"" autocmd DocLoad twitter.com urlmodify -t twitter.com nitter.net

" autocmd to save current url in file/DB? for history or to use in other programs like hyprland

# bindurl reddit.com <Space><Space> urlmodify -t www old
bindurl https://github.com/.*/.*/blob f hint -c .blob-num,a
bindurl https://github.com/notifications <Space><Space> openGithubNotifications
bindurl youtu((\.be)|(be\.com)) f hint -J

"" Stupid workaround to let hint -; be used with composite which steals semi-colons
command hint_focus hint -;

bind yn composite js document.location.href.replace(/https?:\/\//,"git@").replace("/",":").replace(/$/,".git") | clipboard yank
#+end_src

* INTERNATIONALISATION
#+begin_src tridactyl
set keyboardlayoutbase qwerty
set keyboardlayoutforce true

#+end_src
* Commands
#+begin_src tridactyl


" delete w command before?"
command w saveas ~/Downloads/firefox

command cache composite get_current_url | tabopen gc
command text composite get_current_url | tabopen txt
command translate composite get_current_url | tabopen tr
command wayback composite get_current_url | tabopen wb
" ┣ Inject Google Translate
" From https://github.com/jeremiahlee/page-translator
command translate js let googleTranslateCallback = document.createElement('script'); googleTranslateCallback.innerHTML = "function googleTranslateElementInit(){ new google.translate.TranslateElement(); }"; document.body.insertBefore(googleTranslateCallback, document.body.firstChild); let googleTranslateScript = document.createElement('script'); googleTranslateScript.charset="UTF-8"; googleTranslateScript.src = "https://translate.google.com/translate_a/element.js?cb=googleTranslateElementInit&tl=&sl=&hl="; document.body.insertBefore(googleTranslateScript, document.body.firstChild);

#+end_src

" Isolate Facebook in its own container
set auconcreatecontainer true
autocontain facebook\.com facebook

* QUICKMARKS
Use searchurls when you need to insert some (small) input, quickmarks otherwise (like for forums)
#+begin_src tridactyl
quickmark a https://www.artstation.com/
" quickmark g https://github.com/tanath/dotfiles
quickmark h https://news.ycombinator.com/
quickmark i https://www.inoreader.com/all_articles
quickmark n https://news.google.com/foryou
quickmark N https://news.google.com/

quickmark m https://www.minuteinbox.com/

" Reddit
quickmark e https://www.reddit.com/r/emacs/new
quickmark n https://www.reddit.com/r/neovim/new
quickmark v https://www.reddit.com/r/neovim/new

quickmark s http://localhost:8989/calendar
" quickmark t https://github.com/Tanath/dotfiles/blob/master/browsers/tridactylrc
quickmark w https://wallhaven.cc/random
quickmark y https://www.youtube.com/playlist?list=WL

" LLM
" start in insert mode for those?
quickmark c https://chatgpt.com
quickmark d https://duck.ai
quickmark m https://www.copilot.microsoft.com
quickmark l  https://chat.mistral.ai/chat?model=codestral
quickmark p https://www.perplexity.ai
#+end_src

* [[https://github.com/tridactyl/tridactyl/wiki/Video-mode][Video Mode]]
bind --mode=video <space> keyfeed <space>
** Enter and exit the mode
#+begin_src tridactyl
alias video_mode composite mode video ; video_mark_init
alias exit_video mode normal
bind gv video_mode
set videomaps.V exit_video
set videomaps.z mode normal

bindurl ^https://www.youtube.com/watch\? v video_mode
" how to make it also when switching to it?
autocmd DocLoad ^https://www.youtube.com/watch\? video_mode
#+end_src

** Helper command
They just like =js=, but pre-define some useful functions.

#+begin_src tridactyl
alias video_with jse let video; if (document.activeElement.name == 'VIDEO') video = document.activeElement; else video = $all('video').find(v => !v.paused); if (!video) video = $('video'); video;
alias jse js 'use strict'; function $all(q, root=document) { return Array.from(root.querySelectorAll(q)) }; function $(q, root=document) { return root.querySelector(q) }; let $ex = (s) => tri.controller.acceptExCmd(s) ; let $set = (...args) => tri.config.set(...args);
alias jsep js -p 'use strict'; function $all(q, root=document) { return Array.from(root.querySelectorAll(q)) }; function $(q, root=document) { return root.querySelector(q) }; let $ex = (s) => tri.controller.acceptExCmd(s) ; let $set = (...args) => tri.config.set(...args);
#+end_src

** Basic seeking
#+begin_src tridactyl
set video_seek 5
" seek forward/backward seconds defined in video_seek
set videomaps.l jsep $ex('video_with').then(video => {const count = Number(JS_ARG) || 1; const tic = Number(get('video_seek')); video.currentTime += tic * count }); 1;
set videomaps.h jsep $ex('video_with').then(video => {const count = Number(JS_ARG) || 1; const tic = Number(get('video_seek')); video.currentTime -= tic * count }); 1;

set video_seek_op 120
set videomaps.L jsep $ex('video_with').then(video => {const count = Number(JS_ARG) || 1; const tic = Number(get('video_seek_op')); video.currentTime += tic * count }); 1;
set videomaps.H jsep $ex('video_with').then(video => {const count = Number(JS_ARG) || 1; const tic = Number(get('video_seek_op')); video.currentTime -= tic * count }); 1;

seturl ^https://www.youtube.com/watch\?v=116OjLa1DwY video_seek_op 42
" set videomaps.C video_with video.currentTime = Number(get('video_seek_op'))
set videomaps.gg video_with video.currentTime = 0
set videomaps.G video_with video.currentTime = video.duration
#+end_src

Although I do not know who will seek to the end or the beginning, I
still do it.

** Seek with specify time
The arguments which pass to the =goto= and the =goby= commands should be
a spaces splited number. The last number is the second, and previous
number is minute, and hour. If the first number is prefix with =-=,
=goto= command will count from the end of the video, and the =goby=
command will count from the current time.

#+begin_src tridactyl
set videomaps.gt fillcmdline video_goto
set videomaps.i fillcmdline video_goto
set videomaps.I fillcmdline video_goby

alias video_goby js -d@ let time = JS_ARGS.filter(Boolean); let sign = '+'; if (time[0].match(/^[-+]/)) { sign = time[0].charAt(0); time[0] = time[0].slice(1) } time = time.filter(Boolean).map(Number); const second = time.reduce((s, n) => s*60+n, 0); tri.controller.acceptExCmd(`video_with video.currentTime ${sign}= ${second}`) @
alias video_goto js -d@ let time = JS_ARGS.filter(Boolean); let sign = '+'; if (time[0].match(/^[-+]/)) { sign = time[0].charAt(0); time[0] = time[0].slice(1) } time = time.filter(Boolean).map(Number); let second = time.reduce((s, n) => s*60+n, 0); if (sign == '-') second = `video.duration - ${second}`; tri.controller.acceptExCmd(`video_with video.currentTime = ${second}`) @
#+end_src

E.g:

#+begin_src tridactyl
" go to 1m 30s of the video
video_goto 1 30
" go to 1h 30m 22s of the video
video_goto 1 30 22
" go to the last 1:30 of the video
video_goto -1 30

" seek 1:30 from the current position
video_goby 1 30
" go back 1:30 from the current position
video_goby -1 30
#+end_src

P.S. These commands are not very useful in fact.

** Mark the timestamp
These commands can mark and jump to the timestamps in video, just like
built-in =markadd= or =markjump=.

#+begin_src tridactyl
set videomaps.m gobble 1 video_mark_add
set videomaps.' gobble 1 video_mark_goto
set videomaps.ge video_mark_empty

set videomaps.E video_mark_goby +1
set videomaps.e video_mark_goby -1
set video_mark_tollorance 1
alias video_mark_add jsep void $ex('video_with').then(video => { const mark = JS_ARG; tri.videoMark.addMark(mark, video.currentTime); $ex('video_mode') })
alias video_mark_empty js const vm = tri.videoMark; vm.historyStore = Object.values(vm.mark).sort((a,b) => a-b);
alias video_mark_goby jsep void $ex('video_with').then(video => { const current = video.currentTime; const n = Number(JS_ARG); const time = tri.videoMark.goby(current, n); video.currentTime = time; $ex('video_mode'); })
alias video_mark_goto jsep void $ex('video_with').then(video => { const mark = JS_ARG; tri.videoMark.addBlur(video.currentTime); const time = tri.videoMark.mark[mark]; if (typeof time == 'number') video.currentTime = time; $ex('video_mode') })

alias video_mark_init jse if(!tri.videoMark){tri.videoMark={historyStore:[],mark:{},goby(current,n){const index=this.historyStore.findIndex(t=>{if(t>current)return true});const move=n<0?n:n-1;let time;if(~index)time=this.historyStore.at(index+move);else time=this.historyStore.at(move);if(Math.abs(time-current)>this.tollorance)return time;else return this.goby(current,n>0?n+1:n-1)},add(time){this.historyStore.push(time);this.historyStore.sort((a,b)=>a-b)},addBlur(time){const exist=this.historyStore.some(t=>Math.abs(t-time)<this.tollorance);if(!exist)this.add(time);return!exist},addMark(mark,time){this.mark[mark]=time;const index=this.historyStore.findIndex(t=>Math.abs(t-time)<this.tollorance);if(~index)this.historyStore[index]=time;else this.add(time)},tollorance:Number(get('video_mark_tollorance')) || 1,markEventHandler(videoEvent){const video=videoEvent.target;const time=video.currentTime;this.addBlur(time);const previousTime=this.getTimerTime();this.addBlur(previousTime)},timerEventHandler(event){const video=event.target;this.videoTimer={epoch:Date.now(),video:video.currentTime,rate:video.playbackRate}},videoTimer:null,getTimerTime(){const now=Date.now();const t=this.videoTimer;if(t)return(now-t.epoch)/1e3*t.rate+t.video}};void async function(){const vm=tri.videoMark;while(true){await sleep(800);const video=await $ex("video_with");if(video){const handler=tri.videoMark.markEventHandler.bind(tri.videoMark);video.addEventListener("seeked",handler);video.addEventListener("pause",handler);const timer=vm.timerEventHandler.bind(vm);video.addEventListener("playing",timer);video.addEventListener("ratechange",timer);timer({target:video});break}}}()}
#+end_src

These commands should call after the =video_mark_init=. Personally, I
call =video_mark_init= when entering the video mode.

The m and ' will mark a timestamp with a character. Lowercase and
uppercase are considered as different character.

The =video_mark_goby= will go to the nth next/prev mark from the current
timestamp. If the nth mark has difference time below the
=video_mark_tollorance=, this timestamp will be skiped. Moreover,
everytime the user seek or pause the video, it will make a anonymouse
mark, which can be jumped to with the =video_mark_goby= command. When
seek, both the before timestamp and the after timestamp will be marked
too. By the way, if any mark already exist within the tollorance before
a anonymouse mark is created, the creation of the anonymouse mark will
be canceled.

** Misc
#+begin_src tridactyl
set videomaps.f fullscreen
" set videomaps.🕷🕷INHERITS🕷🕷 nmaps
#+end_src

* Blacklist
#+begin_src tridactyl
"" Blacklisting figma and others
"" side note: Shift+Esc will toogle ignore mode
blacklistadd figma.com
blacklistadd gmail.com
blacklistadd docs.google.com
blacklistadd sheets.google.com


#+end_src

* Alias
#+begin_src tridactyl

"" Suspend / "discard" all tabs - handy for stretching out battery life
alias discardall jsb browser.tabs.query({}).then(ts => browser.tabs.discard(ts.map(t=>t.id)))


#+end_src

